var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Layer = require('./layer');
var Squash = require('./squash');
var _Utils = require('./utils');
var Utils = _Utils.Utils;
var SoftMaxLayer = (function (_super) {
    __extends(SoftMaxLayer, _super);
    function SoftMaxLayer(size, label) {
        _super.call(this, size, label);
        this.optimizable = false;
        for (var n = 0; n < this.list.length; n++) {
            this.list[n].squash = Squash.EXP;
        }
    }
    SoftMaxLayer.prototype.activate = function (input) {
        if (this.currentActivation.length != this.list.length)
            this.currentActivation = new Float64Array(this.list.length);
        var activationIndex = 0;
        var sum = 0;
        if (typeof input != 'undefined') {
            if (input.length != this.size)
                throw "INPUT size and LAYER size must be the same to activate!";
            Utils.softMax(input);
            for (var id in this.list) {
                this.list[id].readIncommingConnections(input[id]);
                sum += this.list[id].activation;
            }
        }
        else {
            for (var id in this.list) {
                this.list[id].readIncommingConnections();
                sum += this.list[id].activation;
            }
        }
        if (isNaN(sum) || sum == Infinity || sum == -Infinity) {
            console.log("Sum se fue al choto.", sum);
        }
        for (var n = 0; n < this.currentActivation.length; n++) {
            var x = this.list[n].activation / sum;
            if (x == Infinity) {
                x = 1;
                console.log('act infinity', this.list[n].activation, sum);
            }
            if (isNaN(x) || x == Infinity || x == -Infinity) {
                console.log("Activacion se fue al choto.", this.list[n].derivative, x, sum);
            }
            this.list[n].activation = this.currentActivation[n] = x;
            this.list[n].derivative = x * (1 - x);
            if (isNaN(this.list[n].derivative)) {
                console.log("Derivada se fue al choto.", this.list[n].derivative, x, sum);
            }
            this.list[n].updateTraces();
        }
        return this.currentActivation;
    };
    SoftMaxLayer.prototype.propagate = function (rate, target) {
        /*if (typeof target != 'undefined') {
            for (var n = 0; n < this.currentActivation.length; n++) {
                this.list[n].derivative =  this.list[n].activation-target[n];
            }
        }*/
        _super.prototype.propagate.call(this, rate, target);
    };
    SoftMaxLayer.NormalizeConnectionWeights = function (layerConnection) {
        var sum = 0;
        for (var c = 0; c < layerConnection.list.length; c++) {
            sum += (layerConnection.list[c].weight = Math.exp(layerConnection.list[c].weight));
        }
        for (var c = 0; c < layerConnection.list.length; c++) {
            layerConnection.list[c].weight /= sum;
        }
    };
    return SoftMaxLayer;
})(Layer.Layer);
exports.SoftMaxLayer = SoftMaxLayer;

//# sourceMappingURL=data:application/json;base64,