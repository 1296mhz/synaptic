var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Layer = require('./layer');
var Squash = require('./squash');
var _Utils = require('./utils');
var Utils = _Utils.Utils;
var SoftMaxLayer = (function (_super) {
    __extends(SoftMaxLayer, _super);
    function SoftMaxLayer(size, label) {
        _super.call(this, size, label);
        this.optimizable = false;
        for (var n = 0; n < this.list.length; n++) {
            this.list[n].squash = Squash.EXP;
        }
    }
    SoftMaxLayer.prototype.activate = function (input) {
        if (this.currentActivation.length != this.list.length)
            this.currentActivation = new Float64Array(this.list.length);
        var activationIndex = 0;
        var sum = 0;
        if (typeof input != 'undefined') {
            if (input.length != this.size)
                throw "INPUT size and LAYER size must be the same to activate!";
            for (var id in this.list) {
                this.list[id].readIncommingConnections(input[id]);
                sum += this.list[id].activation;
            }
        }
        else {
            for (var id in this.list) {
                this.list[id].readIncommingConnections();
                sum += this.list[id].activation;
            }
        }
        if (isNaN(sum) || sum == Infinity || sum == -Infinity) {
            console.log("Sum se fue al choto.", sum);
        }
        for (var n = 0; n < this.currentActivation.length; n++) {
            var x = this.list[n].activation / sum;
            if (isNaN(x) || x == Infinity || x == -Infinity) {
                console.log("Activacion se fue al choto.", this.list[n].derivative, x, sum);
            }
            this.currentActivation[n] = x;
            var der = x;
            this.list[n].derivative = x * (1 - x); //-((sum - this.list[n].activation) - this.list[n].activation)//x * (1 - x);
            if (isNaN(this.list[n].derivative)) {
                console.log("Derivada se fue al choto.", this.list[n].derivative, x, sum);
            }
            this.list[n].updateTraces();
        }
        return this.currentActivation;
    };
    return SoftMaxLayer;
})(Layer.Layer);
exports.SoftMaxLayer = SoftMaxLayer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zb2Z0bWF4TGF5ZXIudHMiXSwibmFtZXMiOlsiU29mdE1heExheWVyIiwiU29mdE1heExheWVyLmNvbnN0cnVjdG9yIiwiU29mdE1heExheWVyLmFjdGl2YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFPLEtBQUssV0FBVyxTQUFTLENBQUMsQ0FBQztBQUNsQyxJQUFPLE1BQU0sV0FBVyxVQUFVLENBQUMsQ0FBQztBQUVwQyxJQUFPLE1BQU0sV0FBVyxTQUFTLENBQUMsQ0FBQztBQUNuQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBRXpCLElBQWEsWUFBWTtJQUFTQSxVQUFyQkEsWUFBWUEsVUFBb0JBO0lBQzVDQSxTQURZQSxZQUFZQSxDQUNaQSxJQUFZQSxFQUFFQSxLQUFjQTtRQUN2Q0Msa0JBQU1BLElBQUlBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRW5CQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUV6QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDM0NBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLEdBQUdBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBO1FBQ2xDQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUVERCwrQkFBUUEsR0FBUkEsVUFBU0EsS0FBOEJBO1FBQ3RDRSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3JEQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRTdEQSxJQUFJQSxlQUFlQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUV4QkEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFWkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsT0FBT0EsS0FBS0EsSUFBSUEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLElBQUlBLENBQUNBO2dCQUM3QkEsTUFBTUEseURBQXlEQSxDQUFDQTtZQUVqRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzFCQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSx3QkFBd0JBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO2dCQUNsREEsR0FBR0EsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0E7WUFDakNBLENBQUNBO1FBQ0ZBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLElBQUlBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUMxQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0Esd0JBQXdCQSxFQUFFQSxDQUFDQTtnQkFDekNBLEdBQUdBLElBQUlBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBO1lBQ2pDQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFBQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxRQUFRQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNwREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUMzQ0EsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN4REEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsR0FBR0EsR0FBR0EsQ0FBQ0E7WUFFdENBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLFFBQVFBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO2dCQUNqREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsNkJBQTZCQSxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxVQUFVQSxFQUFFQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM3RUEsQ0FBQ0E7WUFHREEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUM5QkEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDWkEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBRUEsQ0FBQ0EsQ0FBQ0EsRUFBQ0EsNEVBQTRFQTtZQUVqSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BDQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSwyQkFBMkJBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFVBQVVBLEVBQUVBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBQzNFQSxDQUFDQTtZQUdEQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtRQUM3QkEsQ0FBQ0E7UUFFREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtJQUMvQkEsQ0FBQ0E7SUFDRkYsbUJBQUNBO0FBQURBLENBNURBLEFBNERDQSxFQTVEaUMsS0FBSyxDQUFDLEtBQUssRUE0RDVDO0FBNURZLG9CQUFZLEdBQVosWUE0RFosQ0FBQSIsImZpbGUiOiJzcmMvc29mdG1heExheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN5bmFwdGljID0gcmVxdWlyZSgnLi9zeW5hcHRpYycpO1xuaW1wb3J0IExheWVyID0gcmVxdWlyZSgnLi9sYXllcicpO1xuaW1wb3J0IFNxdWFzaCA9IHJlcXVpcmUoJy4vc3F1YXNoJyk7XG5pbXBvcnQgTmV1cm9uID0gcmVxdWlyZSgnLi9uZXVyb24nKTtcbmltcG9ydCBfVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgVXRpbHMgPSBfVXRpbHMuVXRpbHM7XG5cbmV4cG9ydCBjbGFzcyBTb2Z0TWF4TGF5ZXIgZXh0ZW5kcyBMYXllci5MYXllciB7XG5cdGNvbnN0cnVjdG9yKHNpemU6IG51bWJlciwgbGFiZWw/OiBzdHJpbmcpIHtcblx0XHRzdXBlcihzaXplLCBsYWJlbCk7XG5cblx0XHR0aGlzLm9wdGltaXphYmxlID0gZmFsc2U7XG5cblx0XHRmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMubGlzdC5sZW5ndGg7IG4rKykge1xuXHRcdFx0dGhpcy5saXN0W25dLnNxdWFzaCA9IFNxdWFzaC5FWFA7XG5cdFx0fVxuXHR9XG5cblx0YWN0aXZhdGUoaW5wdXQ/OiBTeW5hcHRpYy5JTnVtZXJpY0FycmF5KTogU3luYXB0aWMuSU51bWVyaWNBcnJheSB7XG5cdFx0aWYgKHRoaXMuY3VycmVudEFjdGl2YXRpb24ubGVuZ3RoICE9IHRoaXMubGlzdC5sZW5ndGgpXG5cdFx0XHR0aGlzLmN1cnJlbnRBY3RpdmF0aW9uID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmxpc3QubGVuZ3RoKTtcblxuXHRcdHZhciBhY3RpdmF0aW9uSW5kZXggPSAwO1xuXG5cdFx0dmFyIHN1bSA9IDA7XG5cblx0XHRpZiAodHlwZW9mIGlucHV0ICE9ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRpZiAoaW5wdXQubGVuZ3RoICE9IHRoaXMuc2l6ZSlcblx0XHRcdFx0dGhyb3cgXCJJTlBVVCBzaXplIGFuZCBMQVlFUiBzaXplIG11c3QgYmUgdGhlIHNhbWUgdG8gYWN0aXZhdGUhXCI7XG5cblx0XHRcdGZvciAodmFyIGlkIGluIHRoaXMubGlzdCkge1xuXHRcdFx0XHR0aGlzLmxpc3RbaWRdLnJlYWRJbmNvbW1pbmdDb25uZWN0aW9ucyhpbnB1dFtpZF0pO1xuXHRcdFx0XHRzdW0gKz0gdGhpcy5saXN0W2lkXS5hY3RpdmF0aW9uO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBpZCBpbiB0aGlzLmxpc3QpIHtcblx0XHRcdFx0dGhpcy5saXN0W2lkXS5yZWFkSW5jb21taW5nQ29ubmVjdGlvbnMoKTtcblx0XHRcdFx0c3VtICs9IHRoaXMubGlzdFtpZF0uYWN0aXZhdGlvbjtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoaXNOYU4oc3VtKSB8fCBzdW0gPT0gSW5maW5pdHkgfHwgc3VtID09IC1JbmZpbml0eSl7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiU3VtIHNlIGZ1ZSBhbCBjaG90by5cIiwgc3VtKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBuID0gMDsgbiA8IHRoaXMuY3VycmVudEFjdGl2YXRpb24ubGVuZ3RoOyBuKyspIHtcblx0XHRcdHZhciB4ID0gdGhpcy5saXN0W25dLmFjdGl2YXRpb24gLyBzdW07XG5cblx0XHRcdGlmIChpc05hTih4KSB8fCB4ID09IEluZmluaXR5IHx8IHggPT0gLUluZmluaXR5KSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQWN0aXZhY2lvbiBzZSBmdWUgYWwgY2hvdG8uXCIsIHRoaXMubGlzdFtuXS5kZXJpdmF0aXZlLCB4LCBzdW0pO1xuXHRcdFx0fVxuXG5cblx0XHRcdHRoaXMuY3VycmVudEFjdGl2YXRpb25bbl0gPSB4O1xuXHRcdFx0dmFyIGRlciA9IHg7XG5cdFx0XHR0aGlzLmxpc3Rbbl0uZGVyaXZhdGl2ZSA9IHggKiAoMS0geCk7Ly8tKChzdW0gLSB0aGlzLmxpc3Rbbl0uYWN0aXZhdGlvbikgLSB0aGlzLmxpc3Rbbl0uYWN0aXZhdGlvbikvL3ggKiAoMSAtIHgpO1xuXHRcdFx0XG5cdFx0XHRpZiAoaXNOYU4odGhpcy5saXN0W25dLmRlcml2YXRpdmUpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiRGVyaXZhZGEgc2UgZnVlIGFsIGNob3RvLlwiLCB0aGlzLmxpc3Rbbl0uZGVyaXZhdGl2ZSwgeCwgc3VtKTtcblx0XHRcdH1cblxuXG5cdFx0XHR0aGlzLmxpc3Rbbl0udXBkYXRlVHJhY2VzKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudEFjdGl2YXRpb247XG5cdH1cbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=