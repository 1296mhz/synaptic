var neuron = require('./neuron');
var network = require('./network');
/*******************************************************************************************
                                            LAYER
*******************************************************************************************/
var Layer = (function () {
    function Layer(size, label) {
        this.list = [];
        this.label = null;
        this.connectedto = [];
        this.size = 0;
        this.size = size | 0;
        this.list = [];
        this.label = label || null;
        this.connectedto = [];
        this.currentActivation = new Float64Array(size);
        while (size--) {
            var theNeuron = new neuron.Neuron();
            this.list.push(theNeuron);
        }
    }
    // activates all the neurons in the layer
    Layer.prototype.activate = function (input) {
        if (this.currentActivation.length != this.list.length)
            this.currentActivation = new Float64Array(this.list.length);
        var activationIndex = 0;
        if (typeof input != 'undefined') {
            if (input.length != this.size)
                throw "INPUT size and LAYER size must be the same to activate!";
            for (var id in this.list) {
                this.currentActivation[activationIndex++] = this.list[id].activate(input[id]);
            }
        }
        else {
            for (var id in this.list) {
                this.currentActivation[activationIndex++] = this.list[id].activate();
            }
        }
        return this.currentActivation;
    };
    // propagates the error on all the neurons of the layer
    Layer.prototype.propagate = function (rate, target) {
        if (typeof target != 'undefined') {
            if (target.length != this.size)
                throw "TARGET size and LAYER size must be the same to propagate!";
            for (var id = this.list.length - 1; id >= 0; id--) {
                var neuron = this.list[id];
                neuron.propagate(rate, target[id]);
            }
        }
        else {
            for (var id = this.list.length - 1; id >= 0; id--) {
                var neuron = this.list[id];
                neuron.propagate(rate);
            }
        }
    };
    // projects a connection from this layer to another one
    Layer.prototype.project = function (layer, type, weights) {
        if (layer instanceof network.Network)
            layer = layer.layers.input;
        if (layer instanceof Layer) {
            if (!this.connected(layer))
                return new Layer.LayerConnection(this, layer, type, weights);
        }
        else
            throw "Invalid argument, you can only project connections to LAYERS and NETWORKS!";
    };
    // gates a connection betwenn two layers
    Layer.prototype.gate = function (connection, type) {
        if (type == Layer.gateType.INPUT) {
            if (connection.to.size != this.size)
                throw "GATER layer and CONNECTION.TO layer must be the same size in order to gate!";
            for (var id in connection.to.list) {
                var neuron = connection.to.list[id];
                var gater = this.list[id];
                for (var input in neuron.connections.inputs) {
                    var gated = neuron.connections.inputs[input];
                    if (gated.ID in connection.connections)
                        gater.gate(gated);
                }
            }
        }
        else if (type == Layer.gateType.OUTPUT) {
            if (connection.from.size != this.size)
                throw "GATER layer and CONNECTION.FROM layer must be the same size in order to gate!";
            for (var id in connection.from.list) {
                var neuron = connection.from.list[id];
                var gater = this.list[id];
                for (var projected in neuron.connections.projected) {
                    var gated = neuron.connections.projected[projected];
                    if (gated.ID in connection.connections)
                        gater.gate(gated);
                }
            }
        }
        else if (type == Layer.gateType.ONE_TO_ONE) {
            if (connection.size != this.size)
                throw "The number of GATER UNITS must be the same as the number of CONNECTIONS to gate!";
            for (var id in connection.list) {
                var gater = this.list[id];
                var gated = connection.list[id];
                gater.gate(gated);
            }
        }
        connection.gatedfrom.push({ layer: this, type: type });
    };
    // true or false whether the whole layer is self-connected or not
    Layer.prototype.selfconnected = function () {
        for (var id in this.list) {
            var neuron = this.list[id];
            if (!neuron.selfconnected())
                return false;
        }
        return true;
    };
    // true of false whether the layer is connected to another layer (parameter) or not
    Layer.prototype.connected = function (layer) {
        // Check if ALL to ALL connection
        var connections = 0;
        for (var here in this.list) {
            for (var there in layer.list) {
                var from = this.list[here];
                var to = layer.list[there];
                var connected = from.connected(to);
                if (connected && connected.type == 'projected')
                    connections++;
            }
        }
        if (connections == this.size * layer.size)
            return Layer.connectionType.ALL_TO_ALL;
        // Check if ONE to ONE connection
        connections = 0;
        for (var neuron in this.list) {
            var from = this.list[neuron];
            var to = layer.list[neuron];
            var connected = from.connected(to);
            if (connected && connected.type == 'projected')
                connections++;
        }
        if (connections == this.size)
            return Layer.connectionType.ONE_TO_ONE;
    };
    // clears all the neuorns in the layer
    Layer.prototype.clear = function () {
        for (var id in this.list) {
            var neuron = this.list[id];
            neuron.clear();
        }
    };
    // resets all the neurons in the layer
    Layer.prototype.reset = function () {
        for (var id in this.list) {
            var neuron = this.list[id];
            neuron.reset();
        }
    };
    // returns all the neurons in the layer (array)
    Layer.prototype.neurons = function () {
        return this.list;
    };
    // adds a neuron to the layer
    Layer.prototype.add = function (neuron) {
        neuron = neuron || new neuron.Neuron();
        this.neurons[neuron.ID] = neuron;
        this.list.push(neuron);
        this.size++;
    };
    Layer.prototype.set = function (options) {
        options = options || {};
        for (var i in this.list) {
            var neuron = this.list[i];
            if (options.label)
                neuron.label = options.label + '_' + neuron.ID;
            if (options.squash)
                neuron.squash = options.squash;
            if (options.bias)
                neuron.bias = options.bias;
        }
        return this;
    };
    return Layer;
})();
exports.Layer = Layer;
var Layer;
(function (Layer) {
    Layer.layerQty = 0;
    function uid() {
        return Layer.layerQty++;
    }
    Layer.uid = uid;
    // types of connections
    Layer.connectionType = {
        ALL_TO_ALL: "ALL TO ALL",
        ONE_TO_ONE: "ONE TO ONE",
        ALL_TO_ELSE: "ALL TO ELSE"
    };
    // types of gates
    Layer.gateType = {
        INPUT: "INPUT",
        OUTPUT: "OUTPUT",
        ONE_TO_ONE: "ONE TO ONE"
    };
    // represents a connection from one layer to another, and keeps track of its weight and gain
    var LayerConnection = (function () {
        function LayerConnection(fromLayer, toLayer, type, weights) {
            this.ID = uid();
            this.selfconnection = false;
            this.size = 0;
            this.gatedfrom = [];
            this.from = fromLayer;
            this.to = toLayer;
            this.selfconnection = toLayer == fromLayer;
            this.type = type;
            this.connections = {};
            this.list = [];
            this.size = 0;
            this.gatedfrom = [];
            if (typeof this.type == 'undefined') {
                if (fromLayer == toLayer)
                    this.type = Layer.connectionType.ONE_TO_ONE;
                else
                    this.type = Layer.connectionType.ALL_TO_ALL;
            }
            if (this.type == Layer.connectionType.ALL_TO_ALL || this.type == Layer.connectionType.ALL_TO_ELSE) {
                for (var here in this.from.list) {
                    for (var there in this.to.list) {
                        var from = this.from.list[here];
                        var to = this.to.list[there];
                        if (this.type == Layer.connectionType.ALL_TO_ELSE && from == to)
                            continue;
                        var connection = from.project(to, weights);
                        this.connections[connection.ID] = connection;
                        this.size = this.list.push(connection);
                    }
                }
            }
            else if (this.type == Layer.connectionType.ONE_TO_ONE) {
                for (var neuron in this.from.list) {
                    var from = this.from.list[neuron];
                    var to = this.to.list[neuron];
                    var connection = from.project(to, weights);
                    this.connections[connection.ID] = connection;
                    this.size = this.list.push(connection);
                }
            }
            fromLayer.connectedto.push(this);
        }
        return LayerConnection;
    })();
    Layer.LayerConnection = LayerConnection;
})(Layer = exports.Layer || (exports.Layer = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9sYXllci50cyJdLCJuYW1lcyI6WyJMYXllciIsIkxheWVyLmNvbnN0cnVjdG9yIiwiTGF5ZXIuYWN0aXZhdGUiLCJMYXllci5wcm9wYWdhdGUiLCJMYXllci5wcm9qZWN0IiwiTGF5ZXIuZ2F0ZSIsIkxheWVyLnNlbGZjb25uZWN0ZWQiLCJMYXllci5jb25uZWN0ZWQiLCJMYXllci5jbGVhciIsIkxheWVyLnJlc2V0IiwiTGF5ZXIubmV1cm9ucyIsIkxheWVyLmFkZCIsIkxheWVyLnNldCIsIkxheWVyLnVpZCIsIkxheWVyLkxheWVyQ29ubmVjdGlvbiIsIkxheWVyLkxheWVyQ29ubmVjdGlvbi5jb25zdHJ1Y3RvciJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxNQUFNLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFDcEMsSUFBTyxPQUFPLFdBQVcsV0FBVyxDQUFDLENBQUM7QUFHdEMsQUFHQTs7NEZBRDRGO0lBQy9FLEtBQUs7SUFRaEJBLFNBUldBLEtBQUtBLENBUUpBLElBQVlBLEVBQUVBLEtBQWNBO1FBUHhDQyxTQUFJQSxHQUFvQkEsRUFBRUEsQ0FBQ0E7UUFDM0JBLFVBQUtBLEdBQVdBLElBQUlBLENBQUNBO1FBQ3JCQSxnQkFBV0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDakJBLFNBQUlBLEdBQUdBLENBQUNBLENBQUNBO1FBS1JBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3JCQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNmQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxJQUFJQSxJQUFJQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFFdEJBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFaERBLE9BQU9BLElBQUlBLEVBQUVBLEVBQUVBLENB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Q0FBQ0EsRUFBRUEsSUFBSUEsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JDQSxJQUFJQSxNQUFNQSxHQUFHQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtnQkFDdENBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO2dCQUMxQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsSUFBSUEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7b0JBQ3BEQSxJQUFJQSxLQUFLQSxHQUFHQSxNQUFNQSxDQUFDQSxXQUFXQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtvQkFDcERBLEVBQUVBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLElBQUlBLFVBQVVBLENBQUNBLFdBQVdBLENBQUNBO3dCQUN0Q0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxDQUFDQTtZQUNGQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxJQUFJQSxLQUFLQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM5Q0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsSUFBSUEsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7Z0JBQ2hDQSxNQUFNQSxrRkFBa0ZBLENBQUNBO1lBRTFGQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxJQUFJQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDaENBLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENB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VUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hDQSxDQUFDQTtZQUNGQSxDQUFDQTtZQUVEQSxTQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNsQ0EsQ0FBQ0E7UUFDRkQsc0JBQUNBO0lBQURBLENBekRBZCxBQXlEQ2MsSUFBQWQ7SUF6RFlBLHFCQUFlQSxHQUFmQSxlQXlEWkEsQ0FBQUE7QUFDRkEsQ0FBQ0EsRUEvRWEsS0FBSyxHQUFMLGFBQUssS0FBTCxhQUFLLFFBK0VsQiIsImZpbGUiOiJzcmMvbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbmV1cm9uID0gcmVxdWlyZSgnLi9uZXVyb24nKTtcbmltcG9ydCBuZXR3b3JrID0gcmVxdWlyZSgnLi9uZXR3b3JrJyk7XG5pbXBvcnQgU3luYXB0aWMgPSByZXF1aXJlKCcuL3N5bmFwdGljJyk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExBWUVSXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGNsYXNzIExheWVyIHtcblx0XHRsaXN0OiBuZXVyb24uTmV1cm9uW10gPSBbXTtcblx0XHRsYWJlbDogc3RyaW5nID0gbnVsbDtcblx0XHRjb25uZWN0ZWR0byA9IFtdO1xuXHRcdHNpemUgPSAwO1xuXHRcdFxuXHRcdGN1cnJlbnRBY3RpdmF0aW9uOiBGbG9hdDY0QXJyYXk7XG5cblx0XHRjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIsIGxhYmVsPzogc3RyaW5nKSB7XG5cdFx0XHR0aGlzLnNpemUgPSBzaXplIHwgMDtcblx0XHRcdHRoaXMubGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5sYWJlbCA9IGxhYmVsIHx8IG51bGw7XG5cdFx0XHR0aGlzLmNvbm5lY3RlZHRvID0gW107XG5cdFx0XHRcblx0XHRcdHRoaXMuY3VycmVudEFjdGl2YXRpb24gPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpO1xuXG5cdFx0XHR3aGlsZSAoc2l6ZS0tKSB7XG5cdFx0XHRcdHZhciB0aGVOZXVyb24gPSBuZXcgbmV1cm9uLk5ldXJvbigpO1xuXHRcdFx0XHR0aGlzLmxpc3QucHVzaCh0aGVOZXVyb24pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcblx0XHQvLyBhY3RpdmF0ZXMgYWxsIHRoZSBuZXVyb25zIGluIHRoZSBsYXllclxuXHRcdGFjdGl2YXRlKGlucHV0PzogU3luYXB0aWMuSU51bWVyaWNBcnJheSkgOiBGbG9hdDY0QXJyYXkge1xuXG5cdFx0XHRpZih0aGlzLmN1cnJlbnRBY3RpdmF0aW9uLmxlbmd0aCAhPSB0aGlzLmxpc3QubGVuZ3RoKVxuXHRcdFx0XHR0aGlzLmN1cnJlbnRBY3RpdmF0aW9uID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmxpc3QubGVuZ3RoKTtcblxuXHRcdFx0dmFyIGFjdGl2YXRpb25JbmRleCA9IDA7XG5cblx0XHRcdGlmICh0eXBlb2YgaW5wdXQgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGlucHV0Lmxlbmd0aCAhPSB0aGlzLnNpemUpXG5cdFx0XHRcdFx0dGhyb3cgXCJJTlBVVCBzaXplIGFuZCBMQVlFUiBzaXplIG11c3QgYmUgdGhlIHNhbWUgdG8gYWN0aXZhdGUhXCI7XG5cblx0XHRcdFx0Zm9yICh2YXIgaWQgaW4gdGhpcy5saXN0KSB7XG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50QWN0aXZhdGlvblthY3RpdmF0aW9uSW5kZXgrK10gPSB0aGlzLmxpc3RbaWRdLmFjdGl2YXRlKGlucHV0W2lkXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAodmFyIGlkIGluIHRoaXMubGlzdCkge1xuXHRcdFx0XHRcdHRoaXMuY3VycmVudEFjdGl2YXRpb25bYWN0aXZhdGlvbkluZGV4KytdID0gdGhpcy5saXN0W2lkXS5hY3RpdmF0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnRBY3RpdmF0aW9uO1xuXHRcdH1cblxuXHRcdC8vIHByb3BhZ2F0ZXMgdGhlIGVycm9yIG9uIGFsbCB0aGUgbmV1cm9ucyBvZiB0aGUgbGF5ZXJcblx0XHRwcm9wYWdhdGUocmF0ZTogbnVtYmVyLCB0YXJnZXQ/IDogU3luYXB0aWMuSU51bWVyaWNBcnJheSkge1xuXHRcdFx0aWYgKHR5cGVvZiB0YXJnZXQgIT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKHRhcmdldC5sZW5ndGggIT0gdGhpcy5zaXplKVxuXHRcdFx0XHRcdHRocm93IFwiVEFSR0VUIHNpemUgYW5kIExBWUVSIHNpemUgbXVzdCBiZSB0aGUgc2FtZSB0byBwcm9wYWdhdGUhXCI7XG5cblx0XHRcdFx0Zm9yICh2YXIgaWQgPSB0aGlzLmxpc3QubGVuZ3RoIC0gMTsgaWQgPj0gMDsgaWQtLSkge1xuXHRcdFx0XHRcdHZhciBuZXVyb24gPSB0aGlzLmxpc3RbaWRdO1xuXHRcdFx0XHRcdG5ldXJvbi5wcm9wYWdhdGUocmF0ZSwgdGFyZ2V0W2lkXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAodmFyIGlkID0gdGhpcy5saXN0Lmxlbmd0aCAtIDE7IGlkID49IDA7IGlkLS0pIHtcblx0XHRcdFx0XHR2YXIgbmV1cm9uID0gdGhpcy5saXN0W2lkXTtcblx0XHRcdFx0XHRuZXVyb24ucHJvcGFnYXRlKHJhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcHJvamVjdHMgYSBjb25uZWN0aW9uIGZyb20gdGhpcyBsYXllciB0byBhbm90aGVyIG9uZVxuXHRcdHByb2plY3QobGF5ZXIgOiBuZXR3b3JrLk5ldHdvcmsgfCBMYXllciwgdHlwZT8sIHdlaWdodHM/IDogU3luYXB0aWMuSU51bWVyaWNBcnJheSkge1xuXG5cdFx0XHRpZiAobGF5ZXIgaW5zdGFuY2VvZiBuZXR3b3JrLk5ldHdvcmspXG5cdFx0XHRcdGxheWVyID0gKDxuZXR3b3JrLk5ldHdvcms+bGF5ZXIpLmxheWVycy5pbnB1dDtcblxuXHRcdFx0aWYgKGxheWVyIGluc3RhbmNlb2YgTGF5ZXIpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmNvbm5lY3RlZChsYXllcikpXG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBMYXllci5MYXllckNvbm5lY3Rpb24odGhpcywgbGF5ZXIsIHR5cGUsIHdlaWdodHMpO1xuXHRcdFx0fSBlbHNlXG5cdFx0XHRcdHRocm93IFwiSW52YWxpZCBhcmd1bWVudCwgeW91IGNhbiBvbmx5IHByb2plY3QgY29ubmVjdGlvbnMgdG8gTEFZRVJTIGFuZCBORVRXT1JLUyFcIjtcblxuXG5cdFx0fVxuXG5cdFx0Ly8gZ2F0ZXMgYSBjb25uZWN0aW9uIGJldHdlbm4gdHdvIGxheWVyc1xuXHRcdGdhdGUoY29ubmVjdGlvbiwgdHlwZSkge1xuXG5cdFx0XHRpZiAodHlwZSA9PSBMYXllci5nYXRlVHlwZS5JTlBVVCkge1xuXHRcdFx0XHRpZiAoY29ubmVjdGlvbi50by5zaXplICE9IHRoaXMuc2l6ZSlcblx0XHRcdFx0XHR0aHJvdyBcIkdBVEVSIGxheWVyIGFuZCBDT05ORUNUSU9OLlRPIGxheWVyIG11c3QgYmUgdGhlIHNhbWUgc2l6ZSBpbiBvcmRlciB0byBnYXRlIVwiO1xuXG5cdFx0XHRcdGZvciAodmFyIGlkIGluIGNvbm5lY3Rpb24udG8ubGlzdCkge1xuXHRcdFx0XHRcdHZhciBuZXVyb24gPSBjb25uZWN0aW9uLnRvLmxpc3RbaWRdO1xuXHRcdFx0XHRcdHZhciBnYXRlciA9IHRoaXMubGlzdFtpZF07XG5cdFx0XHRcdFx0Zm9yICh2YXIgaW5wdXQgaW4gbmV1cm9uLmNvbm5lY3Rpb25zLmlucHV0cykge1xuXHRcdFx0XHRcdFx0dmFyIGdhdGVkID0gbmV1cm9uLmNvbm5lY3Rpb25zLmlucHV0c1tpbnB1dF07XG5cdFx0XHRcdFx0XHRpZiAoZ2F0ZWQuSUQgaW4gY29ubmVjdGlvbi5jb25uZWN0aW9ucylcblx0XHRcdFx0XHRcdFx0Z2F0ZXIuZ2F0ZShnYXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT0gTGF5ZXIuZ2F0ZVR5cGUuT1VUUFVUKSB7XG5cdFx0XHRcdGlmIChjb25uZWN0aW9uLmZyb20uc2l6ZSAhPSB0aGlzLnNpemUpXG5cdFx0XHRcdFx0dGhyb3cgXCJHQVRFUiBsYXllciBhbmQgQ09OTkVDVElPTi5GUk9NIGxheWVyIG11c3QgYmUgdGhlIHNhbWUgc2l6ZSBpbiBvcmRlciB0byBnYXRlIVwiO1xuXG5cdFx0XHRcdGZvciAodmFyIGlkIGluIGNvbm5lY3Rpb24uZnJvbS5saXN0KSB7XG5cdFx0XHRcdFx0dmFyIG5ldXJvbiA9IGNvbm5lY3Rpb24uZnJvbS5saXN0W2lkXTtcblx0XHRcdFx0XHR2YXIgZ2F0ZXIgPSB0aGlzLmxpc3RbaWRdO1xuXHRcdFx0XHRcdGZvciAodmFyIHByb2plY3RlZCBpbiBuZXVyb24uY29ubmVjdGlvbnMucHJvamVjdGVkKSB7XG5cdFx0XHRcdFx0XHR2YXIgZ2F0ZWQgPSBuZXVyb24uY29ubmVjdGlvbnMucHJvamVjdGVkW3Byb2plY3RlZF07XG5cdFx0XHRcdFx0XHRpZiAoZ2F0ZWQuSUQgaW4gY29ubmVjdGlvbi5jb25uZWN0aW9ucylcblx0XHRcdFx0XHRcdFx0Z2F0ZXIuZ2F0ZShnYXRlZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT0gTGF5ZXIuZ2F0ZVR5cGUuT05FX1RPX09ORSkge1xuXHRcdFx0XHRpZiAoY29ubmVjdGlvbi5zaXplICE9IHRoaXMuc2l6ZSlcblx0XHRcdFx0XHR0aHJvdyBcIlRoZSBudW1iZXIgb2YgR0FURVIgVU5JVFMgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIENPTk5FQ1RJT05TIHRvIGdhdGUhXCI7XG5cblx0XHRcdFx0Zm9yICh2YXIgaWQgaW4gY29ubmVjdGlvbi5saXN0KSB7XG5cdFx0XHRcdFx0dmFyIGdhdGVyID0gdGhpcy5saXN0W2lkXTtcblx0XHRcdFx0XHR2YXIgZ2F0ZWQgPSBjb25uZWN0aW9uLmxpc3RbaWRdO1xuXHRcdFx0XHRcdGdhdGVyLmdhdGUoZ2F0ZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjb25uZWN0aW9uLmdhdGVkZnJvbS5wdXNoKHsgbGF5ZXI6IHRoaXMsIHR5cGU6IHR5cGUgfSk7XG5cdFx0fVxuXG5cdFx0Ly8gdHJ1ZSBvciBmYWxzZSB3aGV0aGVyIHRoZSB3aG9sZSBsYXllciBpcyBzZWxmLWNvbm5lY3RlZCBvciBub3Rcblx0XHRzZWxmY29ubmVjdGVkKCk6IGJvb2xlYW4ge1xuXG5cdFx0XHRmb3IgKHZhciBpZCBpbiB0aGlzLmxpc3QpIHtcblx0XHRcdFx0dmFyIG5ldXJvbiA9IHRoaXMubGlzdFtpZF07XG5cdFx0XHRcdGlmICghbmV1cm9uLnNlbGZjb25uZWN0ZWQoKSlcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyB0cnVlIG9mIGZhbHNlIHdoZXRoZXIgdGhlIGxheWVyIGlzIGNvbm5lY3RlZCB0byBhbm90aGVyIGxheWVyIChwYXJhbWV0ZXIpIG9yIG5vdFxuXHRcdGNvbm5lY3RlZChsYXllcikge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgQUxMIHRvIEFMTCBjb25uZWN0aW9uXG5cdFx0XHR2YXIgY29ubmVjdGlvbnMgPSAwO1xuXHRcdFx0Zm9yICh2YXIgaGVyZSBpbiB0aGlzLmxpc3QpIHtcblx0XHRcdFx0Zm9yICh2YXIgdGhlcmUgaW4gbGF5ZXIubGlzdCkge1xuXHRcdFx0XHRcdHZhciBmcm9tID0gdGhpcy5saXN0W2hlcmVdO1xuXHRcdFx0XHRcdHZhciB0byA9IGxheWVyLmxpc3RbdGhlcmVdO1xuXHRcdFx0XHRcdHZhciBjb25uZWN0ZWQgPSBmcm9tLmNvbm5lY3RlZCh0byk7XG5cdFx0XHRcdFx0aWYgKGNvbm5lY3RlZCAmJiBjb25uZWN0ZWQudHlwZSA9PSAncHJvamVjdGVkJylcblx0XHRcdFx0XHRcdGNvbm5lY3Rpb25zKys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChjb25uZWN0aW9ucyA9PSB0aGlzLnNpemUgKiBsYXllci5zaXplKVxuXHRcdFx0XHRyZXR1cm4gTGF5ZXIuY29ubmVjdGlvblR5cGUuQUxMX1RPX0FMTDtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgT05FIHRvIE9ORSBjb25uZWN0aW9uXG5cdFx0XHRjb25uZWN0aW9ucyA9IDA7XG5cdFx0XHRmb3IgKHZhciBuZXVyb24gaW4gdGhpcy5saXN0KSB7XG5cdFx0XHRcdHZhciBmcm9tID0gdGhpcy5saXN0W25ldXJvbl07XG5cdFx0XHRcdHZhciB0byA9IGxheWVyLmxpc3RbbmV1cm9uXTtcblx0XHRcdFx0dmFyIGNvbm5lY3RlZCA9IGZyb20uY29ubmVjdGVkKHRvKTtcblx0XHRcdFx0aWYgKGNvbm5lY3RlZCAmJiBjb25uZWN0ZWQudHlwZSA9PSAncHJvamVjdGVkJylcblx0XHRcdFx0XHRjb25uZWN0aW9ucysrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNvbm5lY3Rpb25zID09IHRoaXMuc2l6ZSlcblx0XHRcdFx0cmV0dXJuIExheWVyLmNvbm5lY3Rpb25UeXBlLk9ORV9UT19PTkU7XG5cdFx0fVxuXG5cdFx0Ly8gY2xlYXJzIGFsbCB0aGUgbmV1b3JucyBpbiB0aGUgbGF5ZXJcblx0XHRjbGVhcigpIHtcblx0XHRcdGZvciAodmFyIGlkIGluIHRoaXMubGlzdCkge1xuXHRcdFx0XHR2YXIgbmV1cm9uID0gdGhpcy5saXN0W2lkXTtcblx0XHRcdFx0bmV1cm9uLmNsZWFyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcmVzZXRzIGFsbCB0aGUgbmV1cm9ucyBpbiB0aGUgbGF5ZXJcblx0XHRyZXNldCgpIHtcblx0XHRcdGZvciAodmFyIGlkIGluIHRoaXMubGlzdCkge1xuXHRcdFx0XHR2YXIgbmV1cm9uID0gdGhpcy5saXN0W2lkXTtcblx0XHRcdFx0bmV1cm9uLnJlc2V0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJucyBhbGwgdGhlIG5ldXJvbnMgaW4gdGhlIGxheWVyIChhcnJheSlcblx0XHRuZXVyb25zKCkgOiBuZXVyb24uTmV1cm9uW10ge1xuXHRcdFx0cmV0dXJuIHRoaXMubGlzdDtcblx0XHR9XG5cblx0XHQvLyBhZGRzIGEgbmV1cm9uIHRvIHRoZSBsYXllclxuXHRcdGFkZChuZXVyb24pIHtcblx0XHRcdG5ldXJvbiA9IG5ldXJvbiB8fCBuZXcgbmV1cm9uLk5ldXJvbigpO1xuXHRcdFx0dGhpcy5uZXVyb25zW25ldXJvbi5JRF0gPSBuZXVyb247XG5cdFx0XHR0aGlzLmxpc3QucHVzaChuZXVyb24pO1xuXHRcdFx0dGhpcy5zaXplKys7XG5cdFx0fVxuXG5cdFx0c2V0KG9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0XHRmb3IgKHZhciBpIGluIHRoaXMubGlzdCkge1xuXHRcdFx0XHR2YXIgbmV1cm9uID0gdGhpcy5saXN0W2ldO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5sYWJlbClcblx0XHRcdFx0XHRuZXVyb24ubGFiZWwgPSBvcHRpb25zLmxhYmVsICsgJ18nICsgbmV1cm9uLklEO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5zcXVhc2gpXG5cdFx0XHRcdFx0bmV1cm9uLnNxdWFzaCA9IG9wdGlvbnMuc3F1YXNoO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5iaWFzKVxuXHRcdFx0XHRcdG5ldXJvbi5iaWFzID0gb3B0aW9ucy5iaWFzO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9XG5cblxuZXhwb3J0IG1vZHVsZSBMYXllciB7XG5cdGV4cG9ydCB2YXIgbGF5ZXJRdHkgPSAwO1xuXHRleHBvcnQgZnVuY3Rpb24gdWlkKCkge1xuXHRcdHJldHVybiBsYXllclF0eSsrO1xuXHR9XG5cdFxuXHQvLyB0eXBlcyBvZiBjb25uZWN0aW9uc1xuXHRleHBvcnQgdmFyIGNvbm5lY3Rpb25UeXBlID0ge1xuXHRcdEFMTF9UT19BTEw6IFwiQUxMIFRPIEFMTFwiLFxuXHRcdE9ORV9UT19PTkU6IFwiT05FIFRPIE9ORVwiLFxuXHRcdEFMTF9UT19FTFNFOiBcIkFMTCBUTyBFTFNFXCJcblx0fTtcblxuXHQvLyB0eXBlcyBvZiBnYXRlc1xuXHRleHBvcnQgdmFyIGdhdGVUeXBlID0ge1xuXHRcdElOUFVUOiBcIklOUFVUXCIsXG5cdFx0T1VUUFVUOiBcIk9VVFBVVFwiLFxuXHRcdE9ORV9UT19PTkU6IFwiT05FIFRPIE9ORVwiXG5cdH07XG5cblx0Ly8gcmVwcmVzZW50cyBhIGNvbm5lY3Rpb24gZnJvbSBvbmUgbGF5ZXIgdG8gYW5vdGhlciwgYW5kIGtlZXBzIHRyYWNrIG9mIGl0cyB3ZWlnaHQgYW5kIGdhaW5cblx0ZXhwb3J0IGNsYXNzIExheWVyQ29ubmVjdGlvbiB7XG5cdFx0SUQgPSB1aWQoKTtcblx0XHRmcm9tOiBMYXllcjtcblx0XHR0bzogTGF5ZXI7XG5cdFx0c2VsZmNvbm5lY3Rpb24gOiBib29sZWFuID0gZmFsc2U7XG5cdFx0dHlwZTogc3RyaW5nO1xuXHRcdGNvbm5lY3Rpb25zOiBTeW5hcHRpYy5EaWN0aW9uYXJ5PG5ldXJvbi5OZXVyb24uQ29ubmVjdGlvbj47XG5cdFx0bGlzdDogbmV1cm9uLk5ldXJvbi5Db25uZWN0aW9uW107XG5cdFx0c2l6ZSA9IDA7XG5cdFx0Z2F0ZWRmcm9tID0gW107XG5cblx0XHRjb25zdHJ1Y3Rvcihmcm9tTGF5ZXIsIHRvTGF5ZXIsIHR5cGUsIHdlaWdodHMpIHtcblx0XHRcdHRoaXMuZnJvbSA9IGZyb21MYXllcjtcblx0XHRcdHRoaXMudG8gPSB0b0xheWVyO1xuXHRcdFx0dGhpcy5zZWxmY29ubmVjdGlvbiA9IHRvTGF5ZXIgPT0gZnJvbUxheWVyO1xuXHRcdFx0dGhpcy50eXBlID0gdHlwZTtcblx0XHRcdHRoaXMuY29ubmVjdGlvbnMgPSB7fTtcblx0XHRcdHRoaXMubGlzdCA9IFtdO1xuXHRcdFx0dGhpcy5zaXplID0gMDtcblx0XHRcdHRoaXMuZ2F0ZWRmcm9tID0gW107XG5cblxuXHRcdFx0aWYgKHR5cGVvZiB0aGlzLnR5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0aWYgKGZyb21MYXllciA9PSB0b0xheWVyKVxuXHRcdFx0XHRcdHRoaXMudHlwZSA9IExheWVyLmNvbm5lY3Rpb25UeXBlLk9ORV9UT19PTkU7XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0XHR0aGlzLnR5cGUgPSBMYXllci5jb25uZWN0aW9uVHlwZS5BTExfVE9fQUxMO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy50eXBlID09IExheWVyLmNvbm5lY3Rpb25UeXBlLkFMTF9UT19BTEwgfHxcblx0XHRcdFx0dGhpcy50eXBlID09IExheWVyLmNvbm5lY3Rpb25UeXBlLkFMTF9UT19FTFNFKSB7XG5cdFx0XHRcdGZvciAodmFyIGhlcmUgaW4gdGhpcy5mcm9tLmxpc3QpIHtcblx0XHRcdFx0XHRmb3IgKHZhciB0aGVyZSBpbiB0aGlzLnRvLmxpc3QpIHtcblx0XHRcdFx0XHRcdHZhciBmcm9tID0gdGhpcy5mcm9tLmxpc3RbaGVyZV07XG5cdFx0XHRcdFx0XHR2YXIgdG8gPSB0aGlzLnRvLmxpc3RbdGhlcmVdO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMudHlwZSA9PSBMYXllci5jb25uZWN0aW9uVHlwZS5BTExfVE9fRUxTRSAmJiBmcm9tID09IHRvKVxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdHZhciBjb25uZWN0aW9uID0gZnJvbS5wcm9qZWN0KHRvLCB3ZWlnaHRzKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5jb25uZWN0aW9uc1tjb25uZWN0aW9uLklEXSA9IGNvbm5lY3Rpb247XG5cdFx0XHRcdFx0XHR0aGlzLnNpemUgPSB0aGlzLmxpc3QucHVzaChjb25uZWN0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy50eXBlID09IExheWVyLmNvbm5lY3Rpb25UeXBlLk9ORV9UT19PTkUpIHtcblxuXHRcdFx0XHRmb3IgKHZhciBuZXVyb24gaW4gdGhpcy5mcm9tLmxpc3QpIHtcblx0XHRcdFx0XHR2YXIgZnJvbSA9IHRoaXMuZnJvbS5saXN0W25ldXJvbl07XG5cdFx0XHRcdFx0dmFyIHRvID0gdGhpcy50by5saXN0W25ldXJvbl07XG5cdFx0XHRcdFx0dmFyIGNvbm5lY3Rpb24gPSBmcm9tLnByb2plY3QodG8sIHdlaWdodHMpO1xuXG5cdFx0XHRcdFx0dGhpcy5jb25uZWN0aW9uc1tjb25uZWN0aW9uLklEXSA9IGNvbm5lY3Rpb247XG5cdFx0XHRcdFx0dGhpcy5zaXplID0gdGhpcy5saXN0LnB1c2goY29ubmVjdGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0ZnJvbUxheWVyLmNvbm5lY3RlZHRvLnB1c2godGhpcyk7XG5cdFx0fVxuXHR9XG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9