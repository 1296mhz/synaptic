var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var network = require('../network');
var trainer = require('../trainer');
var Layer = require('../layer');
var MemoryTape = (function () {
    function MemoryTape(memoryBlocks, layer, inputGate, forgetGate) {
        var _this = this;
        this.memoryAttentionLocation = 0;
        this.memoryAttentionWeight = 0;
        this.blocks = memoryBlocks;
        this.data = new Array(memoryBlocks);
        this.blockWidth = layer.list.length;
        this.layer = layer;
        for (var location = 0; location < this.blocks; location++) {
            var array = this.data[location] = new Float64Array(this.blockWidth);
            for (var i = 0; i < array.length; i++) {
                array[i] = 0.1 * Math.random();
            }
        }
        // Hack the layer!
        this.prevLayerActivate = this.layer.activate.bind(this.layer);
        this.layer.activate = function (input) {
            var key = _this.prevLayerActivate(input);
            var addGate = inputGate.currentActivation;
            var eraseGate = forgetGate.currentActivation;
            var similarAddresses = _this.getSimilarAdresses(key);
            // elegible memblocks for read/write operations
            var elegibleIndexes = [0, 1, 2];
            var elegibleWeights = [0.2, 0.6, 0.2]; // shifting, softmax
            var focus = 1;
            _this.memoryAttentionWeight = 0;
            for (var address = 0; address < similarAddresses.length; address++) {
                var ß = similarAddresses[address];
                if (ß > _this.memoryAttentionWeight) {
                    _this.memoryAttentionWeight = ß;
                    _this.memoryAttentionLocation = address;
                }
            }
            elegibleIndexes = [_this.memoryAttentionLocation - 1, _this.memoryAttentionLocation, _this.memoryAttentionLocation + 1];
            focus = _this.memoryAttentionWeight;
            for (var n = 0; n < elegibleIndexes.length; n++) {
                var index = elegibleIndexes[n];
                if (index < 0)
                    index += similarAddresses.length;
                else if (index >= similarAddresses.length)
                    index -= similarAddresses.length;
                elegibleIndexes[n] = index;
                elegibleWeights[n] = Math.pow(elegibleWeights[n], focus);
                var M = _this.data[index];
                for (var i = 0; i < M.length; i++) {
                    // do erase operations on the memory tape. NTM: 3.2 (3)
                    M[i] *= 1 - eraseGate[i] * key[i] * elegibleWeights[n];
                    // do add operations on the memory tape. NTM: 3.2 (4)
                    M[i] += addGate[i] * key[i] * elegibleWeights[n];
                }
            }
            layer.list.forEach(function (neuron, i) {
                // modify the current key (readVector)
                var tmpKey = 0;
                for (var n = 0; n < elegibleIndexes.length; n++) {
                    tmpKey += _this.data[elegibleIndexes[n]][i] * elegibleWeights[n];
                }
                // write activation value back into each neuron, also squash it on the key vector      
                neuron.derivative = neuron.squash(tmpKey, true);
                neuron.activation = key[i] = neuron.squash(tmpKey, false);
            });
            return key;
        };
    }
    MemoryTape.getSimilarity = function (arrayA, arrayB) {
        // http://en.wikipedia.org/wiki/Cosine_similarity
        // NTM: 3.3.1 (6)
        var dotPr = 0;
        var acumA = 0, acumB = 0;
        for (var i = 0; i < arrayA.length; i++) {
            dotPr += arrayA[i] * arrayB[i];
            acumA += arrayA[i] * arrayA[i];
            acumB += arrayB[i] * arrayB[i];
        }
        return dotPr / (Math.sqrt(acumA) * Math.sqrt(acumB) + .00005);
    };
    MemoryTape.softMaxArray = function (array, sharpen) {
        // for all i ∈ array
        // sum = ∑ array[n]^e
        // i = î^e / sum
        // where the result ∑ array[0..n] = 1
        if (sharpen === void 0) { sharpen = 1; }
        if (!array.length)
            return array;
        sharpen = sharpen || 1;
        var sum = 0;
        for (var i = 0; i < array.length; i++) {
            array[i] = Math.exp(sharpen * array[i]);
            sum += array[i];
        }
        if (sum != 0) {
            for (var i = 0; i < array.length; i++)
                array[i] /= sum;
        }
        else {
            var div = 1 / array.length;
            for (var i = 0; i < array.length; i++)
                array[i] = div;
        }
        return array;
    };
    // obtains an array of similarity indexes for each memoryBlock
    MemoryTape.prototype.getSimilarAdresses = function (weights) {
        //checkpoint: 10th cigarret
        var addresses = new Float64Array(this.data.length);
        for (var i = 0; i < this.data.length; i++)
            addresses[i] = MemoryTape.getSimilarity(this.data[i], weights);
        return addresses;
    };
    return MemoryTape;
})();
exports.MemoryTape = MemoryTape;
var MemoryBlock = (function (_super) {
    __extends(MemoryBlock, _super);
    function MemoryBlock(inputSize, memoryBlocks, memoryWidth, outputSize) {
        // DO NOT OPTIMIZE THIS NETWORK
        this.optimized = false;
        var option = {
            peepholes: Layer.Layer.connectionType.ALL_TO_ALL,
            hiddentohidden: false,
            outtohidden: false,
            outtogates: false,
            intoout: true,
        };
        var inputLayer = new Layer.Layer(inputSize);
        var hiddenLayers = [];
        var outputLayer = new Layer.Layer(outputSize);
        //#region generate layers
        // generate memory blocks (memory cell and respective gates)
        var inputGate = new Layer.Layer(memoryWidth).set({
            bias: 1
        });
        var forgetGate = new Layer.Layer(memoryWidth).set({
            bias: 1
        });
        var memoryCell = new Layer.Layer(memoryWidth);
        var outputGate = new Layer.Layer(memoryWidth).set({
            bias: 1
        });
        hiddenLayers.push(inputGate);
        hiddenLayers.push(forgetGate);
        hiddenLayers.push(memoryCell);
        hiddenLayers.push(outputGate);
        // connections from input layer
        var input = inputLayer.project(memoryCell);
        inputLayer.project(inputGate);
        inputLayer.project(forgetGate);
        inputLayer.project(outputGate);
        // connections from memory cell
        var output = memoryCell.project(outputLayer);
        // self-connection
        var self = memoryCell.project(memoryCell);
        // peepholes
        memoryCell.project(inputGate, option.peepholes);
        memoryCell.project(forgetGate, option.peepholes);
        memoryCell.project(outputGate, option.peepholes);
        // gates
        inputGate.gate(input, Layer.Layer.gateType.INPUT);
        forgetGate.gate(self, Layer.Layer.gateType.ONE_TO_ONE);
        outputGate.gate(output, Layer.Layer.gateType.OUTPUT);
        this.memoryTape = new MemoryTape(memoryBlocks, memoryCell, inputGate, forgetGate);
        //#endregion
        // input to output direct connection
        if (option.intoout)
            inputLayer.project(outputLayer);
        // set the layers of the neural network
        _super.call(this, {
            input: inputLayer,
            hidden: hiddenLayers,
            output: outputLayer
        });
        // trainer
        this.trainer = new trainer.Trainer(this);
    }
    return MemoryBlock;
})(network.Network);
exports.MemoryBlock = MemoryBlock;
;

//# sourceMappingURL=data:application/json;base64,