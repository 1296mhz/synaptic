var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var network = require('../network');
var trainer = require('../trainer');
var Layer = require('../layer');
var Squash = require('../squash');
var Utils = (function () {
    function Utils() {
    }
    Utils.softMax = function (array) {
        // for all i ∈ array
        // sum = ∑ array[n]^e
        // i = î^e / sum
        // where the result ∑ array[0..n] = 1
        if (!array.length)
            return array;
        var sum = 0;
        for (var i = 0; i < array.length; i++) {
            array[i] = Math.exp(array[i]);
            sum += array[i];
        }
        for (var i = 0; i < array.length; i++)
            array[i] /= sum;
        return array;
    };
    Utils.softMaxSharpen = function (array, sharpen) {
        // for all i ∈ array
        // sum = ∑ array[n]^e
        // i = î^e / sum
        // where the result ∑ array[0..n] = 1
        if (sharpen === void 0) { sharpen = 1; }
        if (!array.length)
            return array;
        sharpen = sharpen || 1;
        var sum = 0;
        for (var i = 0; i < array.length; i++) {
            array[i] = Math.exp(sharpen * array[i]);
            sum += array[i];
        }
        if (sum != 0) {
            for (var i = 0; i < array.length; i++)
                array[i] /= sum;
        }
        else {
            var div = 1 / array.length;
            for (var i = 0; i < array.length; i++)
                array[i] = div;
        }
        return array;
    };
    Utils.getCosineSimilarity = function (arrayA, arrayB) {
        // http://en.wikipedia.org/wiki/Cosine_similarity
        // NTM: 3.3.1 (6)
        var dotPr = 0;
        var acumA = 0, acumB = 0;
        for (var i = 0; i < arrayA.length; i++) {
            dotPr += arrayA[i] * arrayB[i];
            acumA += arrayA[i] * arrayA[i];
            acumB += arrayB[i] * arrayB[i];
        }
        return dotPr / (Math.sqrt(acumA) * Math.sqrt(acumB) + .00005);
    };
    Utils.interpolateArray = function (output_inputA, inputB, g) {
        // 3.3.2 focus by location (7)
        var gInverted = 1 - g;
        for (var i = 0; i < output_inputA.length; i++)
            output_inputA[i] = output_inputA[i] * g + gInverted * inputB[i];
        return output_inputA;
    };
    // w_sharpWn
    Utils.sharpArray = function (output, wn, Y) {
        // 3.3.2 (9)
        var sum = 0;
        for (var i = 0; i < wn.length; i++) {
            wn[i] = Math.pow(wn[i], Y);
            sum += wn[i];
        }
        // ∀ a ∈ wn → a = a^Y / sum
        if (sum != 0) {
            for (var i = 0; i < wn.length; i++)
                output[i] = wn[i] / sum;
        }
        else {
            var div = 1 / wn.length;
            for (var i = 0; i < wn.length; i++)
                output[i] = div;
        }
    };
    //wn_shift
    Utils.scalarShifting = function (wg, shiftScalar) {
        // w~ 3.3.2 (8)
        var shiftings = new Float64Array(wg.length);
        var wn = new Float64Array(wg.length);
        var intPart = shiftScalar | 0;
        var decimalPart = shiftScalar - intPart;
        shiftings[intPart % shiftings.length] = 1 - decimalPart;
        shiftings[(intPart + 1) % shiftings.length] = decimalPart;
        for (var i = 0; i < wn.length; i++) {
            var acum = 0;
            for (var j = 0; j < wn.length; j++) {
                if ((i - j) < 0)
                    acum += wg[j] * shiftings[shiftings.length - Math.abs(i - j)];
                else
                    acum += wg[j] * shiftings[(i - j) % shiftings.length];
            }
            wn[i] = acum;
        }
        return wn;
    };
    Utils.normalizeShift = function (shift) {
        var sum = 0;
        for (var i = 0; i < shift.length; i++) {
            sum += shift[i];
        }
        for (var j = 0; j < shift.length; j++) {
            shift[j] /= sum;
        }
    };
    Utils.vectorInvertedShifting = function (wg, shiftings) {
        // w~ 3.3.2 (8)
        var ret = new Float64Array(wg.length);
        var corrimientoIndex = -((shiftings.length - 1) / 2) | 0;
        var circulantMatrix = Utils.buildCirculantMatrix(wg.length);
        for (var i = 0; i < wg.length; i++) {
            for (var x = 0; x < wg.length; x++) {
                var tmp = 0;
                for (var shift = 0; shift < shiftings.length; shift++) {
                    var matRow = i - x + corrimientoIndex + shift;
                    while (matRow < 0)
                        matRow += wg.length;
                    matRow %= wg.length;
                    tmp += wg[circulantMatrix[x][matRow]] * shiftings[shift];
                }
                ret[i] = tmp;
            }
        }
        wg.set(ret);
    };
    Utils.initRandomSoftmaxArray = function (array) {
        for (var i = 0; i < array.length; i++) {
            array[i] = Math.random();
        }
        Utils.softMax(array);
    };
    Utils.buildCirculantMatrix = function (length, offset) {
        if (offset === void 0) { offset = 0; }
        var ret = [];
        for (var i = 0; i < length; i++) {
            var arr = new Float64Array(length);
            ret.push(arr);
            for (var n = 0; n < length; n++) {
                arr[n] = ((i + n) % length);
            }
        }
        return ret;
    };
    return Utils;
})();
exports.Utils = Utils;
var NTM = (function (_super) {
    __extends(NTM, _super);
    function NTM(inputs, outputs, memBlocks, blockWidth, heads, hiddenSize) {
        // build the memory
        _super.call(this);
        this.heads = new Array();
        this.dirty = false;
        this.trainer = new trainer.Trainer(this);
        this.blocks = memBlocks;
        this.blockWidth = blockWidth;
        this.data = new Array(this.blocks);
        for (var index = 0; index < this.data.length; index++) {
            this.data[index] = new Float64Array(blockWidth);
        }
        this.clean();
        // build the network
        var inputLength = inputs + heads * memBlocks;
        this.inputValues = new Float64Array(inputLength);
        this.layers.input = this.inputLayer = new Layer.Layer(inputLength);
        this.hiddenLayer = new Layer.Layer(hiddenSize);
        this.layers.output = this.outputLayer = new Layer.Layer(outputs);
        this.inputLayer.project(this.hiddenLayer, Layer.Layer.connectionType.ALL_TO_ALL);
        this.hiddenLayer.project(this.outputLayer, Layer.Layer.connectionType.ALL_TO_ALL);
        var inputCounter = inputs - 1;
        for (var headIndex = 0; headIndex < heads; headIndex++) {
            this.addHead(this.inputValues.subarray(inputCounter, inputCounter + memBlocks));
            inputCounter += memBlocks;
        }
        this.optimized = false;
    }
    NTM.prototype.clean = function () {
        for (var location = 0; location < this.blocks; location++) {
            Utils.initRandomSoftmaxArray(this.data[location]);
        }
        this.dirty = false;
    };
    NTM.prototype.activate = function (input) {
        this.inputValues.set(input);
        this.inputLayer.activate(this.inputValues);
        this.hiddenLayer.activate();
        this.doTimeStep();
        return this.outputLayer.activate();
    };
    NTM.prototype.propagate = function (rate, target) {
        this.outputLayer.propagate(rate, target);
        for (var i = this.heads.length - 1; i >= 0; i--) {
            this.heads[i].layer.propagate(rate);
        }
        this.hiddenLayer.propagate(rate);
        this.dirty = true;
    };
    NTM.prototype.addHead = function (subArray) {
        var head = new Head(this, subArray);
        this.heads.push(head);
        return head;
    };
    NTM.prototype.doTimeStep = function () {
        var _this = this;
        this.heads.forEach(function (head, headIndex) {
            head.doTimeStep();
        });
        // parallelizable
        this.heads.forEach(function (head, headIndex) {
            _this.doErase(head.w_weightings, head.eraseGate);
        });
        // parallelizable
        this.heads.forEach(function (head, headIndex) {
            _this.doAdd(head.w_weightings, head.addGate);
        });
        //this.data.forEach((e) => e = Utils.softMax(e))
    };
    NTM.prototype.doAdd = function (w, addGate) {
        for (var n = 0; n < this.blocks; n++) {
            var M = this.data[n];
            for (var i = 0; i < this.blockWidth; i++) {
                M[i] += addGate[n] * w[i];
            }
        }
    };
    NTM.prototype.doErase = function (w, eraseGate) {
        for (var n = 0; n < this.blocks; n++) {
            var M = this.data[n];
            for (var i = 0; i < this.blockWidth; i++) {
                M[i] *= 1 - eraseGate[n] * w[i];
            }
        }
    };
    return NTM;
})(network.Network);
exports.NTM = NTM;
var Head = (function () {
    function Head(memory, destinationArray) {
        this.s_shiftingValue = null;
        this.prevFocus = 1;
        this.memory = memory;
        this.wc_focusedWeights = new Float64Array(this.memory.blocks);
        this.w_weightings = new Float64Array(this.memory.blocks);
        Utils.initRandomSoftmaxArray(this.w_weightings);
        this.shiftLength = 3; //this.memory.blocks;
        this.s_shiftingVector = new Float64Array(this.shiftLength);
        this.k_keys = new Float64Array(this.memory.blockWidth);
        this.ß_keyStrength = 0;
        this.eraseGate = new Float64Array(this.memory.blocks);
        this.addGate = new Float64Array(this.memory.blocks);
        this.readVector = destinationArray || new Float64Array(this.memory.blocks);
        this.layer = new Layer.Layer(this.memory.blockWidth + this.memory.blocks * 3 + Head.ADDITIONAL_INPUT_VALUES + this.shiftLength);
        this.memory.hiddenLayer.project(this.layer, Layer.Layer.connectionType.ALL_TO_ALL);
        this.layer.project(this.memory.outputLayer, Layer.Layer.connectionType.ALL_TO_ALL);
        this.circulantMatrix = Utils.buildCirculantMatrix(this.memory.blocks);
    }
    Head.prototype.readParams = function (activation) {
        this.ß_keyStrength = Squash.SOFTPLUS(activation[0]);
        this.g_interpolation = Squash.LOGISTIC(activation[1]);
        this.Y_focus = Math.log(Math.exp(activation[2] + 1)) + 1; //Squash.SOFTPLUS(activation[2]) + 1;
        var startAt = 3;
        for (var k = 0; k < this.k_keys.length; k++) {
            this.k_keys[k] = this.layer.list[k + startAt].activation;
        }
        startAt += this.k_keys.length;
        for (var k = 0; k < this.addGate.length; k++) {
            this.addGate[k] = this.layer.list[k + startAt].derivative;
        }
        startAt += this.addGate.length;
        for (var k = 0; k < this.eraseGate.length; k++) {
            this.eraseGate[k] = Squash.LOGISTIC(this.layer.list[k + startAt].activation);
        }
        startAt += this.eraseGate.length;
        for (var k = 0; k < this.shiftLength; k++) {
            this.s_shiftingVector[k] = this.layer.list[k + startAt].activation;
        }
        var M = this.memory.data;
        for (var i = 0; i < M.length; i++)
            this.wc_focusedWeights[i] = Utils.getCosineSimilarity(M[i], this.k_keys);
        // focus by location (interpolation)
        Utils.interpolateArray(this.wc_focusedWeights, this.w_weightings, this.g_interpolation);
        // convolutional shift
        this.doShiftings();
        // sharpening
        Utils.sharpArray(this.w_weightings, this.wc_focusedWeights, this.Y_focus);
        // since ∑ w = 1, we have to softmax the array
        Utils.softMax(this.w_weightings);
        /// we got wt!
    };
    Head.prototype.doShiftings = function () {
        Utils.softMax(this.s_shiftingVector);
        Utils.vectorInvertedShifting(this.wc_focusedWeights, this.s_shiftingVector);
    };
    Head.prototype.doTimeStep = function () {
        var activation = this.layer.activate();
        this.readParams(activation);
        for (var index = 0; index < this.memory.blocks; index++) {
            this.readVector[index] = 0;
            for (var cell = 0; cell < this.memory.blockWidth; cell++) {
                this.readVector[index] += this.memory.data[index][cell] * this.w_weightings[index];
            }
        }
    };
    Head.ADDITIONAL_INPUT_VALUES = 3;
    return Head;
})();
exports.Head = Head;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcmNoaXRlY3QvTlRNLnRzIl0sIm5hbWVzIjpbIlV0aWxzIiwiVXRpbHMuY29uc3RydWN0b3IiLCJVdGlscy5zb2Z0TWF4IiwiVXRpbHMuc29mdE1heFNoYXJwZW4iLCJVdGlscy5nZXRDb3NpbmVTaW1pbGFyaXR5IiwiVXRpbHMuaW50ZXJwb2xhdGVBcnJheSIsIlV0aWxzLnNoYXJwQXJyYXkiLCJVdGlscy5zY2FsYXJTaGlmdGluZyIsIlV0aWxzLm5vcm1hbGl6ZVNoaWZ0IiwiVXRpbHMudmVjdG9ySW52ZXJ0ZWRTaGlmdGluZyIsIlV0aWxzLmluaXRSYW5kb21Tb2Z0bWF4QXJyYXkiLCJVdGlscy5idWlsZENpcmN1bGFudE1hdHJpeCIsIk5UTSIsIk5UTS5jb25zdHJ1Y3RvciIsIk5UTS5jbGVhbiIsIk5UTS5hY3RpdmF0ZSIsIk5UTS5wcm9wYWdhdGUiLCJOVE0uYWRkSGVhZCIsIk5UTS5kb1RpbWVTdGVwIiwiTlRNLmRvQWRkIiwiTlRNLmRvRXJhc2UiLCJIZWFkIiwiSGVhZC5jb25zdHJ1Y3RvciIsIkhlYWQucmVhZFBhcmFtcyIsIkhlYWQuZG9TaGlmdGluZ3MiLCJIZWFkLmRvVGltZVN0ZXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sT0FBTyxXQUFXLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLElBQU8sT0FBTyxXQUFXLFlBQVksQ0FBQyxDQUFDO0FBQ3ZDLElBQU8sS0FBSyxXQUFXLFVBQVUsQ0FBQyxDQUFDO0FBR25DLElBQU8sTUFBTSxXQUFXLFdBQVcsQ0FBQyxDQUFDO0FBRXJDLElBQWEsS0FBSztJQUFsQkEsU0FBYUEsS0FBS0E7SUE0TGxCQyxDQUFDQTtJQTNMUUQsYUFBT0EsR0FBZEEsVUFBaURBLEtBQVFBO1FBQ3ZERSxvQkFBb0JBO1FBQ3BCQSxxQkFBcUJBO1FBQ3JCQSxnQkFBZ0JBO1FBQ2hCQSxxQ0FBcUNBO1FBRXJDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQTtZQUFD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QSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtvQkFDZEEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2hFQSxJQUFJQTtvQkFDRkEsSUFBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7WUFDMURBLENBQUNBO1lBQ0RBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2ZBLENBQUNBO1FBRURBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1pBLENBQUNBO0lBRU1QLG9CQUFjQSxHQUFyQkEsVUFBc0JBLEtBQW1CQTtRQUN2Q1EsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDWkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsS0FBS0EsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDdENBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ2xCQSxDQUFDQTtRQUNEQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN0Q0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsR0FBR0EsQ0FBQ0E7UUFDbEJBLENBQUNBO0lBQ0hBLENB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LEVBQUVBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEtBQUtBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ3REQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUVsREEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0E7UUFFYkEsQUFFQUEsb0JBRm9CQTtZQUVoQkEsV0FBV0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsU0FBU0EsQ0FBQ0E7UUFFN0NBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBRWpEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFHQSxJQUFJQSxDQUFDQSxVQUFVQSxHQUFHQSxJQUFJQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUNuRUEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDL0NBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBSWpFQSxJQUFJQSxDQUFDQSxVQUFVQSxDQUFDQSxPQUFPQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUFFQSxLQUFLQSxDQUFDQSxLQUFLQSxDQUFDQSxjQUFjQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUNqRkEsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsRUFBRUEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFFbEZBLElBQUlBLFlBQVlBLEdBQUdBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1FBRTlCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxHQUFHQSxDQUFDQSxFQUFFQSxTQUFTQSxHQUFHQSxLQUFLQSxFQUFFQSxTQUFTQSxFQUFFQSxFQUFFQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsWUFBWUEsRUFBRUEsWUFBWUEsR0FBR0EsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaEZBLFlBQVlBLElBQUlBLFNBQVNBLENBQUNBO1FBQzVCQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFFREQsbUJBQUtBLEdBQUxBO1FBQ0VFLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLFFBQVFBLEdBQUdBLENBQUNBLEVBQUVBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLFFBQVFBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzFEQSxLQUFLQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BEQSxDQUFDQTtRQUNEQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUNyQkEsQ0FBQ0E7SUFFREYsc0JBQVFBLEdBQVJBLFVBQVNBLEtBQTZCQTtRQUNwQ0csSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsR0FBR0EsQ0FBTUEsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFFakNBLElBQUlBLENBQUNBLFVBQVVBLENBQUNBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQzNDQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtRQUU1QkEsSUFBSUEsQ0FBQ0Es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Q0E7UUFDOURBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBRXpEQSxLQUFLQSxDQUFDQSxzQkFBc0JBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBO1FBRWhEQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxFQUFFQSxxQkFBcUJBO1FBRTNDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1FBQzNEQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUN2REEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ3REQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNwREEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsZ0JBQWdCQSxJQUFJQSxJQUFJQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUUzRUEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsVUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxHQUFHQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQTtRQUVoSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7UUFDbkZBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLFdBQVdBLEVBQUVBLEtBQUtBLENBQUNBLEtBQUtBLENBQUNBLGNBQWNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1FBRW5GQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQSxvQkFBb0JBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQ3hFQSxDQUFDQTtJQUVPRCx5QkFBVUEsR0FBbEJBLFVBQW1CQSxVQUF3QkE7UUFFekNFLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1FBQ3BEQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUN0REEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBQ0EscUNBQXFDQTtRQUU5RkEsSUFBSUEsT0FBT0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDaEJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzVDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUMzREEsQ0FBQ0E7UUFFREEsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDOUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQzdDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQTtRQUM1REEsQ0FBQ0E7UUFFREEsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDL0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQy9DQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxPQUFPQSxDQUFDQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQTtRQUMvRUEsQ0FBQ0E7UUFFREEsT0FBT0EsSUFBSUEsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEs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QSxDQUFDQSxDQUFDQTtZQUNyRkEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7SUFoSE1KLDRCQUF1QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7SUFpSHJDQSxXQUFDQTtBQUFEQSxDQWxIQSxBQWtIQ0EsSUFBQTtBQWxIWSxZQUFJLEdBQUosSUFrSFosQ0FBQSIsImZpbGUiOiJzcmMvYXJjaGl0ZWN0L05UTS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZXR3b3JrID0gcmVxdWlyZSgnLi4vbmV0d29yaycpO1xuaW1wb3J0IHRyYWluZXIgPSByZXF1aXJlKCcuLi90cmFpbmVyJyk7XG5pbXBvcnQgTGF5ZXIgPSByZXF1aXJlKCcuLi9sYXllcicpO1xuaW1wb3J0IG5ldXJvbiA9IHJlcXVpcmUoJy4uL25ldXJvbicpO1xuaW1wb3J0IFN5bmFwdGljID0gcmVxdWlyZSgnLi4vc3luYXB0aWMnKTtcbmltcG9ydCBTcXVhc2ggPSByZXF1aXJlKCcuLi9zcXVhc2gnKTtcblxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiAgc3RhdGljIHNvZnRNYXg8VCBleHRlbmRzIFN5bmFwdGljLklOdW1lcmljQXJyYXk+KGFycmF5OiBUKTogVCB7XG4gICAgLy8gZm9yIGFsbCBpIOKIiCBhcnJheVxuICAgIC8vIHN1bSA9IOKIkSBhcnJheVtuXV5lXG4gICAgLy8gaSA9IMOuXmUgLyBzdW1cbiAgICAvLyB3aGVyZSB0aGUgcmVzdWx0IOKIkSBhcnJheVswLi5uXSA9IDFcblxuICAgIGlmICghYXJyYXkubGVuZ3RoKSByZXR1cm4gYXJyYXk7XG5cbiAgICB2YXIgc3VtID0gMDtcblxuICAgIC8vIHN1bSA9IOKIkSBhcnJheVtuXV5lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyYXlbaV0gPSBNYXRoLmV4cChhcnJheVtpXSk7XG4gICAgICBzdW0gKz0gYXJyYXlbaV07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgYXJyYXlbaV0gLz0gc3VtO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIHN0YXRpYyBzb2Z0TWF4U2hhcnBlbjxUIGV4dGVuZHMgU3luYXB0aWMuSU51bWVyaWNBcnJheT4oYXJyYXk6IFQsIHNoYXJwZW4gPSAxKTogVCB7XG4gICAgLy8gZm9yIGFsbCBpIOKIiCBhcnJheVxuICAgIC8vIHN1bSA9IOKIkSBhcnJheVtuXV5lXG4gICAgLy8gaSA9IMOuXmUgLyBzdW1cbiAgICAvLyB3aGVyZSB0aGUgcmVzdWx0IOKIkSBhcnJheVswLi5uXSA9IDFcblxuICAgIGlmICghYXJyYXkubGVuZ3RoKSByZXR1cm4gYXJyYXk7XG5cbiAgICBzaGFycGVuID0gc2hhcnBlbiB8fCAxO1xuXG4gICAgdmFyIHN1bSA9IDA7XG5cbiAgICAvLyBzdW0gPSDiiJEgYXJyYXlbbl1eZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycmF5W2ldID0gTWF0aC5leHAoc2hhcnBlbiAqIGFycmF5W2ldKTtcbiAgICAgIHN1bSArPSBhcnJheVtpXTtcbiAgICB9XG5cbiAgICBpZiAoc3VtICE9IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIGFycmF5W2ldIC89IHN1bTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGRpdiA9IDEgLyBhcnJheS5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSBhcnJheVtpXSA9IGRpdjtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuXG4gIHN0YXRpYyBnZXRDb3NpbmVTaW1pbGFyaXR5KGFycmF5QTogU3luYXB0aWMuSU51bWVyaWNBcnJheSwgYXJyYXlCOiBTeW5hcHRpYy5JTnVtZXJpY0FycmF5KTogbnVtYmVyIHtcbiAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nvc2luZV9zaW1pbGFyaXR5XG4gICAgLy8gTlRNOiAzLjMuMSAoNilcbiAgICB2YXIgZG90UHIgPSAwO1xuXG4gICAgdmFyIGFjdW1BID0gMCwgYWN1bUIgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheUEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRvdFByICs9IGFycmF5QVtpXSAqIGFycmF5QltpXTtcbiAgICAgIGFjdW1BICs9IGFycmF5QVtpXSAqIGFycmF5QVtpXTtcbiAgICAgIGFjdW1CICs9IGFycmF5QltpXSAqIGFycmF5QltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZG90UHIgLyAoTWF0aC5zcXJ0KGFjdW1BKSAqIE1hdGguc3FydChhY3VtQikgKyAuMDAwMDUpO1xuICB9XG5cbiAgc3RhdGljIGludGVycG9sYXRlQXJyYXkob3V0cHV0X2lucHV0QTogU3luYXB0aWMuSU51bWVyaWNBcnJheSwgaW5wdXRCOiBTeW5hcHRpYy5JTnVtZXJpY0FycmF5LCBnKSB7XG4gICAgLy8gMy4zLjIgZm9jdXMgYnkgbG9jYXRpb24gKDcpXG4gICAgdmFyIGdJbnZlcnRlZCA9IDEgLSBnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0X2lucHV0QS5sZW5ndGg7IGkrKylcbiAgICAgIG91dHB1dF9pbnB1dEFbaV0gPSBvdXRwdXRfaW5wdXRBW2ldICogZyArIGdJbnZlcnRlZCAqIGlucHV0QltpXTtcbiAgICByZXR1cm4gb3V0cHV0X2lucHV0QTtcbiAgfVxuICBcbiAgLy8gd19zaGFycFduXG4gIHN0YXRpYyBzaGFycEFycmF5KG91dHB1dDogU3luYXB0aWMuSU51bWVyaWNBcnJheSwgd246IFN5bmFwdGljLklOdW1lcmljQXJyYXksIFk6IG51bWJlcikge1xuICAgIC8vIDMuMy4yICg5KVxuICAgIHZhciBzdW0gPSAwO1xuXG4gICAgLy8g4oiAIGEg4oiIIHduIOKGkiBhID0gYV5ZXG4gICAgLy8gc3VtID0g4oiRIGFeWSBcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduW2ldID0gTWF0aC5wb3cod25baV0sIFkpO1xuICAgICAgc3VtICs9IHduW2ldO1xuICAgIH1cblxuICAgIC8vIOKIgCBhIOKIiCB3biDihpIgYSA9IGFeWSAvIHN1bVxuICAgIGlmIChzdW0gIT0gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3bi5sZW5ndGg7IGkrKykgb3V0cHV0W2ldID0gd25baV0gLyBzdW07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkaXYgPSAxIC8gd24ubGVuZ3RoO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3bi5sZW5ndGg7IGkrKykgb3V0cHV0W2ldID0gZGl2O1xuICAgIH1cbiAgfVxuICBcbiAgLy93bl9zaGlmdFxuICBzdGF0aWMgc2NhbGFyU2hpZnRpbmcod2c6IFN5bmFwdGljLklOdW1lcmljQXJyYXksIHNoaWZ0U2NhbGFyOiBudW1iZXIpIHtcbiAgICAvLyB3fiAzLjMuMiAoOClcbiAgICB2YXIgc2hpZnRpbmdzID0gbmV3IEZsb2F0NjRBcnJheSh3Zy5sZW5ndGgpO1xuICAgIHZhciB3biA9IG5ldyBGbG9hdDY0QXJyYXkod2cubGVuZ3RoKTtcblxuICAgIHZhciBpbnRQYXJ0ID0gc2hpZnRTY2FsYXIgfCAwO1xuICAgIHZhciBkZWNpbWFsUGFydCA9IHNoaWZ0U2NhbGFyIC0gaW50UGFydDtcblxuICAgIHNoaWZ0aW5nc1tpbnRQYXJ0ICUgc2hpZnRpbmdzLmxlbmd0aF0gPSAxIC0gZGVjaW1hbFBhcnQ7XG4gICAgc2hpZnRpbmdzWyhpbnRQYXJ0ICsgMSkgJSBzaGlmdGluZ3MubGVuZ3RoXSA9IGRlY2ltYWxQYXJ0O1xuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHduLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYWN1bSA9IDA7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHduLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmICgoaSAtIGopIDwgMClcbiAgICAgICAgICBhY3VtICs9IHdnW2pdICogc2hpZnRpbmdzW3NoaWZ0aW5ncy5sZW5ndGggLSBNYXRoLmFicyhpIC0gaildO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgYWN1bSArPSB3Z1tqXSAqIHNoaWZ0aW5nc1soaSAtIGopICUgc2hpZnRpbmdzLmxlbmd0aF07XG4gICAgICB9XG4gICAgICB3bltpXSA9IGFjdW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHduO1xuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZVNoaWZ0KHNoaWZ0OiBGbG9hdDY0QXJyYXkpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNoaWZ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBzdW0gKz0gc2hpZnRbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2hpZnQubGVuZ3RoOyBqKyspIHtcbiAgICAgIHNoaWZ0W2pdIC89IHN1bTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdmVjdG9ySW52ZXJ0ZWRTaGlmdGluZyh3ZzogRmxvYXQ2NEFycmF5LCBzaGlmdGluZ3M6IFN5bmFwdGljLklOdW1lcmljQXJyYXkpIHtcbiAgICAvLyB3fiAzLjMuMiAoOClcblxuICAgIFxuICAgIHZhciByZXQgPSBuZXcgRmxvYXQ2NEFycmF5KHdnLmxlbmd0aCk7XG5cbiAgICB2YXIgY29ycmltaWVudG9JbmRleCA9IC0oKHNoaWZ0aW5ncy5sZW5ndGggLSAxKSAvIDIpIHwgMDtcblxuICAgIHZhciBjaXJjdWxhbnRNYXRyaXggPSBVdGlscy5idWlsZENpcmN1bGFudE1hdHJpeCh3Zy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Zy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB3Zy5sZW5ndGg7IHgrKykge1xuICAgICAgICB2YXIgdG1wID0gMDtcblxuICAgICAgICBmb3IgKHZhciBzaGlmdCA9IDA7IHNoaWZ0IDwgc2hpZnRpbmdzLmxlbmd0aDsgc2hpZnQrKykge1xuXG4gICAgICAgICAgdmFyIG1hdFJvdyA9IGkgLSB4ICsgY29ycmltaWVudG9JbmRleCArIHNoaWZ0O1xuXG4gICAgICAgICAgd2hpbGUgKG1hdFJvdyA8IDApXG4gICAgICAgICAgICBtYXRSb3cgKz0gd2cubGVuZ3RoO1xuXG4gICAgICAgICAgbWF0Um93ICU9IHdnLmxlbmd0aDtcblxuICAgICAgICAgIHRtcCArPSB3Z1tjaXJjdWxhbnRNYXRyaXhbeF1bbWF0Um93XV0gKiBzaGlmdGluZ3Nbc2hpZnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0W2ldID0gdG1wO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgd2cuc2V0KHJldCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdFJhbmRvbVNvZnRtYXhBcnJheShhcnJheTogRmxvYXQ2NEFycmF5KTogdm9pZCB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyYXlbaV0gPSBNYXRoLnJhbmRvbSgpO1xuICAgIH1cblxuICAgIFV0aWxzLnNvZnRNYXgoYXJyYXkpO1xuICB9XG5cbiAgc3RhdGljIGJ1aWxkQ2lyY3VsYW50TWF0cml4KGxlbmd0aDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlciA9IDApOiBGbG9hdDY0QXJyYXlbXSB7XG4gICAgdmFyIHJldCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFyciA9IG5ldyBGbG9hdDY0QXJyYXkobGVuZ3RoKTtcbiAgICAgIHJldC5wdXNoKGFycik7XG4gICAgICBmb3IgKHZhciBuID0gMDsgbiA8IGxlbmd0aDsgbisrKSB7XG4gICAgICAgIGFycltuXSA9ICgoaSArIG4pICUgbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cblxuXG5leHBvcnQgY2xhc3MgTlRNIGV4dGVuZHMgbmV0d29yay5OZXR3b3JrIHtcbiAgdHJhaW5lcjogdHJhaW5lci5UcmFpbmVyO1xuXG4gIGRhdGE6IEZsb2F0NjRBcnJheVtdO1xuXG4gIGJsb2NrV2lkdGg6IG51bWJlcjtcbiAgYmxvY2tzOiBudW1iZXI7XG5cbiAgaGVhZHM6IEhlYWRbXSA9IG5ldyBBcnJheSgpO1xuXG4gIGlucHV0VmFsdWVzOiBGbG9hdDY0QXJyYXk7XG5cbiAgaW5wdXRMYXllcjogTGF5ZXIuTGF5ZXI7XG4gIGhpZGRlbkxheWVyOiBMYXllci5MYXllcjtcbiAgb3V0cHV0TGF5ZXI6IExheWVyLkxheWVyO1xuXG4gIGRpcnR5ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoaW5wdXRzOiBudW1iZXIsIG91dHB1dHM6IG51bWJlciwgbWVtQmxvY2tzOiBudW1iZXIsIGJsb2NrV2lkdGg6IG51bWJlciwgaGVhZHM6IG51bWJlciwgaGlkZGVuU2l6ZTogbnVtYmVyKSB7XG4gICAgLy8gYnVpbGQgdGhlIG1lbW9yeVxuICAgIFxuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnRyYWluZXIgPSBuZXcgdHJhaW5lci5UcmFpbmVyKHRoaXMpO1xuXG4gICAgdGhpcy5ibG9ja3MgPSBtZW1CbG9ja3M7XG4gICAgdGhpcy5ibG9ja1dpZHRoID0gYmxvY2tXaWR0aDtcblxuICAgIHRoaXMuZGF0YSA9IG5ldyBBcnJheSh0aGlzLmJsb2Nrcyk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuZGF0YS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRoaXMuZGF0YVtpbmRleF0gPSBuZXcgRmxvYXQ2NEFycmF5KGJsb2NrV2lkdGgpO1xuXG4gICAgfVxuXG4gICAgdGhpcy5jbGVhbigpO1xuICAgIFxuICAgIC8vIGJ1aWxkIHRoZSBuZXR3b3JrXG4gICAgXG4gICAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXRzICsgaGVhZHMgKiBtZW1CbG9ja3M7XG5cbiAgICB0aGlzLmlucHV0VmFsdWVzID0gbmV3IEZsb2F0NjRBcnJheShpbnB1dExlbmd0aCk7XG5cbiAgICB0aGlzLmxheWVycy5pbnB1dCA9IHRoaXMuaW5wdXRMYXllciA9IG5ldyBMYXllci5MYXllcihpbnB1dExlbmd0aCk7XG4gICAgdGhpcy5oaWRkZW5MYXllciA9IG5ldyBMYXllci5MYXllcihoaWRkZW5TaXplKTtcbiAgICB0aGlzLmxheWVycy5vdXRwdXQgPSB0aGlzLm91dHB1dExheWVyID0gbmV3IExheWVyLkxheWVyKG91dHB1dHMpO1xuXG5cblxuICAgIHRoaXMuaW5wdXRMYXllci5wcm9qZWN0KHRoaXMuaGlkZGVuTGF5ZXIsIExheWVyLkxheWVyLmNvbm5lY3Rpb25UeXBlLkFMTF9UT19BTEwpO1xuICAgIHRoaXMuaGlkZGVuTGF5ZXIucHJvamVjdCh0aGlzLm91dHB1dExheWVyLCBMYXllci5MYXllci5jb25uZWN0aW9uVHlwZS5BTExfVE9fQUxMKTtcblxuICAgIHZhciBpbnB1dENvdW50ZXIgPSBpbnB1dHMgLSAxO1xuXG4gICAgZm9yICh2YXIgaGVhZEluZGV4ID0gMDsgaGVhZEluZGV4IDwgaGVhZHM7IGhlYWRJbmRleCsrKSB7XG4gICAgICB0aGlzLmFkZEhlYWQodGhpcy5pbnB1dFZhbHVlcy5zdWJhcnJheShpbnB1dENvdW50ZXIsIGlucHV0Q291bnRlciArIG1lbUJsb2NrcykpO1xuICAgICAgaW5wdXRDb3VudGVyICs9IG1lbUJsb2NrcztcbiAgICB9XG5cbiAgICB0aGlzLm9wdGltaXplZCA9IGZhbHNlO1xuICB9XG5cbiAgY2xlYW4oKSB7XG4gICAgZm9yICh2YXIgbG9jYXRpb24gPSAwOyBsb2NhdGlvbiA8IHRoaXMuYmxvY2tzOyBsb2NhdGlvbisrKSB7XG4gICAgICBVdGlscy5pbml0UmFuZG9tU29mdG1heEFycmF5KHRoaXMuZGF0YVtsb2NhdGlvbl0pO1xuICAgIH1cbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gIH1cblxuICBhY3RpdmF0ZShpbnB1dDogU3luYXB0aWMuSU51bWVyaWNBcnJheSkge1xuICAgIHRoaXMuaW5wdXRWYWx1ZXMuc2V0KDxhbnk+aW5wdXQpO1xuXG4gICAgdGhpcy5pbnB1dExheWVyLmFjdGl2YXRlKHRoaXMuaW5wdXRWYWx1ZXMpO1xuICAgIHRoaXMuaGlkZGVuTGF5ZXIuYWN0aXZhdGUoKTtcblxuICAgIHRoaXMuZG9UaW1lU3RlcCgpO1xuXG4gICAgcmV0dXJuIHRoaXMub3V0cHV0TGF5ZXIuYWN0aXZhdGUoKTtcbiAgfVxuXG4gIHByb3BhZ2F0ZShyYXRlOiBudW1iZXIsIHRhcmdldDogU3luYXB0aWMuSU51bWVyaWNBcnJheSkge1xuICAgIHRoaXMub3V0cHV0TGF5ZXIucHJvcGFnYXRlKHJhdGUsIHRhcmdldCk7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuaGVhZHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMuaGVhZHNbaV0ubGF5ZXIucHJvcGFnYXRlKHJhdGUpO1xuICAgIH1cbiAgICB0aGlzLmhpZGRlbkxheWVyLnByb3BhZ2F0ZShyYXRlKTtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfVxuXG4gIGFkZEhlYWQoc3ViQXJyYXk6IEZsb2F0NjRBcnJheSk6IEhlYWQge1xuICAgIHZhciBoZWFkID0gbmV3IEhlYWQodGhpcywgc3ViQXJyYXkpO1xuICAgIHRoaXMuaGVhZHMucHVzaChoZWFkKTtcbiAgICByZXR1cm4gaGVhZDtcbiAgfVxuXG4gIGRvVGltZVN0ZXAoKSB7XG4gICAgdGhpcy5oZWFkcy5mb3JFYWNoKChoZWFkLCBoZWFkSW5kZXgpID0+IHtcbiAgICAgIGhlYWQuZG9UaW1lU3RlcCgpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIHBhcmFsbGVsaXphYmxlXG4gICAgdGhpcy5oZWFkcy5mb3JFYWNoKChoZWFkLCBoZWFkSW5kZXgpID0+IHtcbiAgICAgIHRoaXMuZG9FcmFzZShoZWFkLndfd2VpZ2h0aW5ncywgaGVhZC5lcmFzZUdhdGUpO1xuICAgIH0pO1xuICAgIFxuICAgIC8vIHBhcmFsbGVsaXphYmxlXG4gICAgdGhpcy5oZWFkcy5mb3JFYWNoKChoZWFkLCBoZWFkSW5kZXgpID0+IHtcbiAgICAgIHRoaXMuZG9BZGQoaGVhZC53X3dlaWdodGluZ3MsIGhlYWQuYWRkR2F0ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgLy90aGlzLmRhdGEuZm9yRWFjaCgoZSkgPT4gZSA9IFV0aWxzLnNvZnRNYXgoZSkpXG4gIH1cblxuICBkb0FkZCh3OiBTeW5hcHRpYy5JTnVtZXJpY0FycmF5LCBhZGRHYXRlOiBTeW5hcHRpYy5JTnVtZXJpY0FycmF5KSB7XG4gICAgZm9yICh2YXIgbiA9IDA7IG4gPCB0aGlzLmJsb2NrczsgbisrKSB7XG4gICAgICB2YXIgTSA9IHRoaXMuZGF0YVtuXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ibG9ja1dpZHRoOyBpKyspIHtcbiAgICAgICAgTVtpXSArPSBhZGRHYXRlW25dICogd1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBkb0VyYXNlKHc6IFN5bmFwdGljLklOdW1lcmljQXJyYXksIGVyYXNlR2F0ZTogU3luYXB0aWMuSU51bWVyaWNBcnJheSkge1xuICAgIGZvciAodmFyIG4gPSAwOyBuIDwgdGhpcy5ibG9ja3M7IG4rKykge1xuICAgICAgdmFyIE0gPSB0aGlzLmRhdGFbbl07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYmxvY2tXaWR0aDsgaSsrKSB7XG4gICAgICAgIE1baV0gKj0gMSAtIGVyYXNlR2F0ZVtuXSAqIHdbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG5leHBvcnQgY2xhc3MgSGVhZCB7XG4gIHN0YXRpYyBBRERJVElPTkFMX0lOUFVUX1ZBTFVFUyA9IDM7XG5cbiAgbWVtb3J5OiBOVE07XG5cbiAgd193ZWlnaHRpbmdzOiBGbG9hdDY0QXJyYXk7XG4gIGVyYXNlR2F0ZTogRmxvYXQ2NEFycmF5O1xuICBhZGRHYXRlOiBGbG9hdDY0QXJyYXk7XG4gIGtfa2V5czogRmxvYXQ2NEFycmF5O1xuICBnX2ludGVycG9sYXRpb246IG51bWJlcjtcbiAgWV9mb2N1czogbnVtYmVyO1xuICBzX3NoaWZ0aW5nVmFsdWU6IG51bWJlciA9IG51bGw7XG4gIHNfc2hpZnRpbmdWZWN0b3I6IEZsb2F0NjRBcnJheTtcbiAgd2NfZm9jdXNlZFdlaWdodHM6IEZsb2F0NjRBcnJheTtcbiAgcmVhZFZlY3RvcjogRmxvYXQ2NEFycmF5O1xuICDDn19rZXlTdHJlbmd0aDogbnVtYmVyO1xuICBwcmV2Rm9jdXM6IG51bWJlciA9IDE7XG5cbiAgc2hpZnRMZW5ndGg6IG51bWJlcjtcblxuICBsYXllcjogTGF5ZXIuTGF5ZXI7XG5cbiAgY2lyY3VsYW50TWF0cml4OiBGbG9hdDY0QXJyYXlbXTtcblxuICBjb25zdHJ1Y3RvcihtZW1vcnk6IE5UTSwgZGVzdGluYXRpb25BcnJheT86IEZsb2F0NjRBcnJheSkge1xuICAgIHRoaXMubWVtb3J5ID0gbWVtb3J5O1xuICAgIHRoaXMud2NfZm9jdXNlZFdlaWdodHMgPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMubWVtb3J5LmJsb2Nrcyk7XG4gICAgdGhpcy53X3dlaWdodGluZ3MgPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMubWVtb3J5LmJsb2Nrcyk7XG5cbiAgICBVdGlscy5pbml0UmFuZG9tU29mdG1heEFycmF5KHRoaXMud193ZWlnaHRpbmdzKTtcblxuICAgIHRoaXMuc2hpZnRMZW5ndGggPSAzOyAvL3RoaXMubWVtb3J5LmJsb2NrcztcblxuICAgIHRoaXMuc19zaGlmdGluZ1ZlY3RvciA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5zaGlmdExlbmd0aCk7XG4gICAgdGhpcy5rX2tleXMgPSBuZXcgRmxvYXQ2NEFycmF5KHRoaXMubWVtb3J5LmJsb2NrV2lkdGgpO1xuICAgIHRoaXMuw59fa2V5U3RyZW5ndGggPSAwO1xuICAgIHRoaXMuZXJhc2VHYXRlID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLm1lbW9yeS5ibG9ja3MpO1xuICAgIHRoaXMuYWRkR2F0ZSA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5tZW1vcnkuYmxvY2tzKTtcbiAgICB0aGlzLnJlYWRWZWN0b3IgPSBkZXN0aW5hdGlvbkFycmF5IHx8IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5tZW1vcnkuYmxvY2tzKTtcblxuICAgIHRoaXMubGF5ZXIgPSBuZXcgTGF5ZXIuTGF5ZXIodGhpcy5tZW1vcnkuYmxvY2tXaWR0aCArIHRoaXMubWVtb3J5LmJsb2NrcyAqIDMgKyBIZWFkLkFERElUSU9OQUxfSU5QVVRfVkFMVUVTICsgdGhpcy5zaGlmdExlbmd0aCk7XG5cbiAgICB0aGlzLm1lbW9yeS5oaWRkZW5MYXllci5wcm9qZWN0KHRoaXMubGF5ZXIsIExheWVyLkxheWVyLmNvbm5lY3Rpb25UeXBlLkFMTF9UT19BTEwpO1xuICAgIHRoaXMubGF5ZXIucHJvamVjdCh0aGlzLm1lbW9yeS5vdXRwdXRMYXllciwgTGF5ZXIuTGF5ZXIuY29ubmVjdGlvblR5cGUuQUxMX1RPX0FMTCk7XG5cbiAgICB0aGlzLmNpcmN1bGFudE1hdHJpeCA9IFV0aWxzLmJ1aWxkQ2lyY3VsYW50TWF0cml4KHRoaXMubWVtb3J5LmJsb2Nrcyk7XG4gIH1cblxuICBwcml2YXRlIHJlYWRQYXJhbXMoYWN0aXZhdGlvbjogRmxvYXQ2NEFycmF5KSB7XG5cbiAgICB0aGlzLsOfX2tleVN0cmVuZ3RoID0gU3F1YXNoLlNPRlRQTFVTKGFjdGl2YXRpb25bMF0pO1xuICAgIHRoaXMuZ19pbnRlcnBvbGF0aW9uID0gU3F1YXNoLkxPR0lTVElDKGFjdGl2YXRpb25bMV0pO1xuICAgIHRoaXMuWV9mb2N1cyA9IE1hdGgubG9nKE1hdGguZXhwKGFjdGl2YXRpb25bMl0gKyAxKSkgKyAxOy8vU3F1YXNoLlNPRlRQTFVTKGFjdGl2YXRpb25bMl0pICsgMTtcblxuICAgIHZhciBzdGFydEF0ID0gMztcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMua19rZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICB0aGlzLmtfa2V5c1trXSA9IHRoaXMubGF5ZXIubGlzdFtrICsgc3RhcnRBdF0uYWN0aXZhdGlvbjtcbiAgICB9XG5cbiAgICBzdGFydEF0ICs9IHRoaXMua19rZXlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMuYWRkR2F0ZS5sZW5ndGg7IGsrKykge1xuICAgICAgdGhpcy5hZGRHYXRlW2tdID0gdGhpcy5sYXllci5saXN0W2sgKyBzdGFydEF0XS5kZXJpdmF0aXZlO1xuICAgIH1cblxuICAgIHN0YXJ0QXQgKz0gdGhpcy5hZGRHYXRlLmxlbmd0aDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMuZXJhc2VHYXRlLmxlbmd0aDsgaysrKSB7XG4gICAgICB0aGlzLmVyYXNlR2F0ZVtrXSA9IFNxdWFzaC5MT0dJU1RJQyh0aGlzLmxheWVyLmxpc3RbayArIHN0YXJ0QXRdLmFjdGl2YXRpb24pO1xuICAgIH1cblxuICAgIHN0YXJ0QXQgKz0gdGhpcy5lcmFzZUdhdGUubGVuZ3RoO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5zaGlmdExlbmd0aDsgaysrKSB7XG4gICAgICB0aGlzLnNfc2hpZnRpbmdWZWN0b3Jba10gPSB0aGlzLmxheWVyLmxpc3RbayArIHN0YXJ0QXRdLmFjdGl2YXRpb247XG4gICAgfVxuXG4gICAgdmFyIE0gPSB0aGlzLm1lbW9yeS5kYXRhO1xuICAgIFxuICAgIC8vIGZvY3VzIGJ5IGNvbnRlbnQsIG9idGFpbnMgYW4gYXJyYXkgb2Ygc2ltaWxhcml0eSBpbmRleGVzIGZvciBlYWNoIG1lbW9yeUJsb2NrXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNLmxlbmd0aDsgaSsrKVxuICAgICAgdGhpcy53Y19mb2N1c2VkV2VpZ2h0c1tpXSA9IFV0aWxzLmdldENvc2luZVNpbWlsYXJpdHkoTVtpXSwgdGhpcy5rX2tleXMpO1xuICAgIFxuICAgIC8vIGZvY3VzIGJ5IGxvY2F0aW9uIChpbnRlcnBvbGF0aW9uKVxuICAgIFV0aWxzLmludGVycG9sYXRlQXJyYXkodGhpcy53Y19mb2N1c2VkV2VpZ2h0cywgdGhpcy53X3dlaWdodGluZ3MsIHRoaXMuZ19pbnRlcnBvbGF0aW9uKTtcbiAgICBcbiAgICAvLyBjb252b2x1dGlvbmFsIHNoaWZ0XG4gICAgdGhpcy5kb1NoaWZ0aW5ncygpO1xuICAgICBcbiAgICAvLyBzaGFycGVuaW5nXG4gICAgVXRpbHMuc2hhcnBBcnJheSh0aGlzLndfd2VpZ2h0aW5ncywgdGhpcy53Y19mb2N1c2VkV2VpZ2h0cywgdGhpcy5ZX2ZvY3VzKTtcbiAgICBcbiAgICAvLyBzaW5jZSDiiJEgdyA9IDEsIHdlIGhhdmUgdG8gc29mdG1heCB0aGUgYXJyYXlcbiAgICBVdGlscy5zb2Z0TWF4KHRoaXMud193ZWlnaHRpbmdzKTtcbiAgICBcbiAgICAvLy8gd2UgZ290IHd0IVxuICB9XG5cbiAgZG9TaGlmdGluZ3MoKSB7XG4gICAgVXRpbHMuc29mdE1heCh0aGlzLnNfc2hpZnRpbmdWZWN0b3IpO1xuXG4gICAgVXRpbHMudmVjdG9ySW52ZXJ0ZWRTaGlmdGluZyh0aGlzLndjX2ZvY3VzZWRXZWlnaHRzLCB0aGlzLnNfc2hpZnRpbmdWZWN0b3IpO1xuICB9XG5cbiAgZG9UaW1lU3RlcCgpIHtcbiAgICB2YXIgYWN0aXZhdGlvbiA9IHRoaXMubGF5ZXIuYWN0aXZhdGUoKTtcblxuICAgIHRoaXMucmVhZFBhcmFtcyhhY3RpdmF0aW9uKTtcbiAgICBcbiAgICAvLyByZWFkaW5nXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMubWVtb3J5LmJsb2NrczsgaW5kZXgrKykge1xuICAgICAgdGhpcy5yZWFkVmVjdG9yW2luZGV4XSA9IDA7XG4gICAgICBmb3IgKHZhciBjZWxsID0gMDsgY2VsbCA8IHRoaXMubWVtb3J5LmJsb2NrV2lkdGg7IGNlbGwrKykge1xuICAgICAgICB0aGlzLnJlYWRWZWN0b3JbaW5kZXhdICs9IHRoaXMubWVtb3J5LmRhdGFbaW5kZXhdW2NlbGxdICogdGhpcy53X3dlaWdodGluZ3NbaW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==